{"ast":null,"code":"import _initializerDefineProperty from \"/home/usuario/Escritorio/csd-bridge-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty\";\nimport _classCallCheck from \"/home/usuario/Escritorio/csd-bridge-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/usuario/Escritorio/csd-bridge-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _applyDecoratedDescriptor from \"/home/usuario/Escritorio/csd-bridge-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"/home/usuario/Escritorio/csd-bridge-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerWarningHelper\";\n\nvar _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _temp;\n\nimport { action, observable } from \"mobx\";\nvar AlertStore = (_class = (_temp =\n/*#__PURE__*/\nfunction () {\n  function AlertStore() {\n    _classCallCheck(this, AlertStore);\n\n    _initializerDefineProperty(this, \"alerts\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"showLoading\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"loadingStepIndex\", _descriptor3, this);\n\n    _initializerDefineProperty(this, \"blockConfirmations\", _descriptor4, this);\n\n    _initializerDefineProperty(this, \"showDailyQuotaInfo\", _descriptor5, this);\n\n    this.homeConnectionErrorSended = false;\n    this.foreignConnectionErrorSended = false;\n    this.loadingSteps = ['Loading', 'Waiting for Block Confirmations...', 'Validators Verifying Transaction...', 'Transfer Complete'];\n    this.HOME_CONNECTION_ERROR = 'Home Connection Error';\n    this.FOREIGN_CONNECTION_ERROR = 'Foreign Connection Error';\n    this.HOME_TRANSFER_SUCCESS = 'Home Transfer Success';\n    this.FOREIGN_TRANSFER_SUCCESS = 'Foreign Transfer Success';\n  }\n\n  _createClass(AlertStore, [{\n    key: \"pushError\",\n    value: function pushError(message, messageType) {\n      console.error(\"Error: \", message);\n      var shouldPushError = this.checkErrorPush(messageType, messageType);\n\n      if (shouldPushError) {\n        var node = document.createElement(\"div\");\n        node.innerHTML = message;\n        var error = {\n          title: \"Error\",\n          content: node,\n          icon: \"error\",\n          messageType: messageType\n        };\n        this.alerts.push(error);\n      }\n    }\n  }, {\n    key: \"checkErrorPush\",\n    value: function checkErrorPush(message, messageType) {\n      if (messageType === this.HOME_CONNECTION_ERROR) {\n        if (this.homeConnectionErrorSended) {\n          return false;\n        } else {\n          this.homeConnectionErrorSended = true;\n          return true;\n        }\n      } else if (messageType === this.FOREIGN_CONNECTION_ERROR) {\n        if (this.foreignConnectionErrorSended) {\n          return false;\n        } else {\n          this.foreignConnectionErrorSended = true;\n          return true;\n        }\n      } else {\n        return true;\n      }\n    }\n  }, {\n    key: \"pushSuccess\",\n    value: function pushSuccess(message, messageType) {\n      var node = document.createElement(\"div\");\n      node.innerHTML = message;\n      var success = {\n        title: \"Success\",\n        content: node,\n        icon: \"success\",\n        messageType: messageType\n      };\n      this.alerts.push(success);\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(value) {\n      var result = this.alerts.remove(value);\n      console.log(result, value, this.alerts);\n    }\n  }, {\n    key: \"setLoading\",\n    value: function setLoading(status) {\n      this.showLoading = status;\n      this.loadingStepIndex = 0;\n      this.blockConfirmations = 0;\n    }\n  }, {\n    key: \"setBlockConfirmations\",\n    value: function setBlockConfirmations(blocks) {\n      this.blockConfirmations = blocks;\n    }\n  }, {\n    key: \"setLoadingStepIndex\",\n    value: function setLoadingStepIndex(index) {\n      var _this = this;\n\n      this.loadingStepIndex = index;\n      console.log(this.loadingSteps[index]);\n\n      if (index === this.loadingSteps.length - 1) {\n        setTimeout(function () {\n          _this.setLoading(false);\n        }, 2000);\n      }\n    }\n  }, {\n    key: \"shouldDisplayLoadingSteps\",\n    value: function shouldDisplayLoadingSteps() {\n      return this.loadingStepIndex !== -1;\n    }\n  }, {\n    key: \"setShowDailyQuotaInfo\",\n    value: function setShowDailyQuotaInfo(value) {\n      this.showDailyQuotaInfo = value;\n    }\n  }]);\n\n  return AlertStore;\n}(), _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"alerts\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return [];\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"showLoading\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return false;\n  }\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"loadingStepIndex\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return -1;\n  }\n}), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, \"blockConfirmations\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return 0;\n  }\n}), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, \"showDailyQuotaInfo\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return false;\n  }\n}), _applyDecoratedDescriptor(_class.prototype, \"pushError\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"pushError\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"pushSuccess\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"pushSuccess\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"setLoading\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"setLoading\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"setBlockConfirmations\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"setBlockConfirmations\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"setLoadingStepIndex\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"setLoadingStepIndex\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"setShowDailyQuotaInfo\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"setShowDailyQuotaInfo\"), _class.prototype)), _class);\nexport default AlertStore;","map":{"version":3,"sources":["/home/usuario/Escritorio/csd-bridge-ui/src/stores/AlertStore.js"],"names":["action","observable","AlertStore","homeConnectionErrorSended","foreignConnectionErrorSended","loadingSteps","HOME_CONNECTION_ERROR","FOREIGN_CONNECTION_ERROR","HOME_TRANSFER_SUCCESS","FOREIGN_TRANSFER_SUCCESS","message","messageType","console","error","shouldPushError","checkErrorPush","node","document","createElement","innerHTML","title","content","icon","alerts","push","success","value","result","remove","log","status","showLoading","loadingStepIndex","blockConfirmations","blocks","index","length","setTimeout","setLoading","showDailyQuotaInfo"],"mappings":"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","sourcesContent":["import { action, observable } from \"mobx\";\n\nclass AlertStore {\n  @observable alerts = [];\n  @observable showLoading = false;\n  @observable loadingStepIndex = -1;\n  @observable blockConfirmations = 0\n  @observable showDailyQuotaInfo = false\n  homeConnectionErrorSended = false\n  foreignConnectionErrorSended = false\n\n  loadingSteps = [\n    'Loading',\n    'Waiting for Block Confirmations...',\n    'Validators Verifying Transaction...',\n    'Transfer Complete'\n  ];\n  HOME_CONNECTION_ERROR = 'Home Connection Error'\n  FOREIGN_CONNECTION_ERROR = 'Foreign Connection Error'\n  HOME_TRANSFER_SUCCESS = 'Home Transfer Success'\n  FOREIGN_TRANSFER_SUCCESS = 'Foreign Transfer Success'\n\n  @action\n  pushError(message, messageType){\n    console.error(\"Error: \", message)\n    const shouldPushError = this.checkErrorPush(messageType, messageType)\n    if(shouldPushError) {\n      const node = document.createElement(\"div\")\n      node.innerHTML = message\n      const error = {\n        title: \"Error\",\n        content: node,\n        icon: \"error\",\n        messageType\n      }\n      this.alerts.push(error)\n    }\n  }\n\n  checkErrorPush(message, messageType){\n    if(messageType === this.HOME_CONNECTION_ERROR) {\n      if(this.homeConnectionErrorSended) {\n        return false\n      } else {\n        this.homeConnectionErrorSended = true\n        return true\n      }\n    } else if(messageType === this.FOREIGN_CONNECTION_ERROR) {\n      if(this.foreignConnectionErrorSended) {\n        return false\n      } else {\n        this.foreignConnectionErrorSended = true\n        return true\n      }\n    } else {\n      return true\n    }\n\n  }\n\n  @action\n  pushSuccess(message, messageType){\n    const node = document.createElement(\"div\")\n    node.innerHTML = message\n    const success = {\n      title: \"Success\",\n      content: node,\n      icon: \"success\",\n      messageType\n    }\n    this.alerts.push(success)\n  }\n\n  remove(value){\n    const result = this.alerts.remove(value);\n    console.log(result, value, this.alerts)\n  }\n\n  @action\n  setLoading(status) {\n    this.showLoading = status;\n    this.loadingStepIndex = 0;\n    this.blockConfirmations = 0\n  }\n\n  @action\n  setBlockConfirmations(blocks) {\n    this.blockConfirmations = blocks\n  }\n\n  @action\n  setLoadingStepIndex(index) {\n    this.loadingStepIndex = index;\n    console.log(this.loadingSteps[index])\n    if(index === this.loadingSteps.length - 1) {\n      setTimeout(() => { this.setLoading(false)}, 2000)\n    }\n  }\n\n  shouldDisplayLoadingSteps() {\n    return this.loadingStepIndex !== -1\n  }\n\n  @action\n  setShowDailyQuotaInfo(value) {\n    this.showDailyQuotaInfo = value\n  }\n\n}\n\nexport default AlertStore;\n"]},"metadata":{},"sourceType":"module"}