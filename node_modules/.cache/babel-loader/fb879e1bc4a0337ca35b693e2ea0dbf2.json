{"ast":null,"code":"//import { abi as HOME_NATIVE_TO_ERC_ABI } from '../../contracts/HomeBridgeNativeToErc.json'\n//import { abi as FOREIGN_NATIVE_TO_ERC_ABI } from '../../contracts/ForeignBridgeNativeToErc.json'\n//import { abi as HOME_ERC_TO_ERC_ABI } from '../../contracts/HomeBridgeErcToErc.json'\n//import { abi as FOREIGN_ERC_TO_ERC_ABI } from '../../contracts/ForeignBridgeErcToErc.json'\nimport { abi as HOME_ERC_TO_NATIVE_ABI } from '../../contracts/HomeBridgeErcToNative.json';\nimport { abi as FOREIGN_ERC_TO_NATIVE_ABI } from '../../contracts/ForeignBridgeErcToNative.json';\nexport var BRIDGE_MODES = {\n  NATIVE_TO_ERC: 'NATIVE_TO_ERC',\n  ERC_TO_ERC: 'ERC_TO_ERC',\n  ERC_TO_NATIVE: 'ERC_TO_NATIVE'\n};\nexport var FEE_MANAGER_MODE = {\n  ONE_DIRECTION: 'ONE_DIRECTION',\n  BOTH_DIRECTIONS: 'BOTH_DIRECTIONS',\n  UNDEFINED: 'UNDEFINED'\n};\nexport var ERC_TYPES = {\n  ERC677: 'ERC677',\n  ERC20: 'ERC20'\n};\nexport var getBridgeABIs = function getBridgeABIs(bridgeMode) {\n  var HOME_ABI = null;\n  var FOREIGN_ABI = null;\n\n  if (bridgeMode === BRIDGE_MODES.NATIVE_TO_ERC) {\n    HOME_ABI = HOME_NATIVE_TO_ERC_ABI;\n    FOREIGN_ABI = FOREIGN_NATIVE_TO_ERC_ABI;\n  } else if (bridgeMode === BRIDGE_MODES.ERC_TO_ERC) {\n    HOME_ABI = HOME_ERC_TO_ERC_ABI;\n    FOREIGN_ABI = FOREIGN_ERC_TO_ERC_ABI;\n  } else if (bridgeMode === BRIDGE_MODES.ERC_TO_NATIVE) {\n    HOME_ABI = HOME_ERC_TO_NATIVE_ABI;\n    FOREIGN_ABI = FOREIGN_ERC_TO_NATIVE_ABI;\n  } else {\n    throw new Error(\"Unrecognized bridge mode: \".concat(bridgeMode));\n  }\n\n  return {\n    HOME_ABI: HOME_ABI,\n    FOREIGN_ABI: FOREIGN_ABI\n  };\n};\nexport var decodeBridgeMode = function decodeBridgeMode(bridgeModeHash) {\n  switch (bridgeModeHash) {\n    case '0x92a8d7fe':\n      return BRIDGE_MODES.NATIVE_TO_ERC;\n\n    case '0xba4690f5':\n      return BRIDGE_MODES.ERC_TO_ERC;\n\n    case '0x18762d46':\n      return BRIDGE_MODES.ERC_TO_NATIVE;\n\n    default:\n      throw new Error(\"Unrecognized bridge mode hash: '\".concat(bridgeModeHash, \"'\"));\n  }\n};\nexport var getUnit = function getUnit(bridgeMode) {\n  var unitHome = null;\n  var unitForeign = null;\n\n  if (bridgeMode === BRIDGE_MODES.NATIVE_TO_ERC) {\n    unitHome = 'Native coins';\n    unitForeign = 'Tokens';\n  } else if (bridgeMode === BRIDGE_MODES.ERC_TO_ERC) {\n    unitHome = 'Tokens';\n    unitForeign = 'Tokens';\n  } else if (bridgeMode === BRIDGE_MODES.ERC_TO_NATIVE) {\n    unitHome = 'Native coins';\n    unitForeign = 'Tokens';\n  } else {\n    throw new Error(\"Unrecognized bridge mode: \".concat(bridgeMode));\n  }\n\n  return {\n    unitHome: unitHome,\n    unitForeign: unitForeign\n  };\n};\nexport var decodeFeeManagerMode = function decodeFeeManagerMode(managerModeHash) {\n  switch (managerModeHash) {\n    case '0xf2aed8f7':\n      return FEE_MANAGER_MODE.ONE_DIRECTION;\n\n    case '0xd7de965f':\n      return FEE_MANAGER_MODE.BOTH_DIRECTIONS;\n\n    default:\n      throw new Error(\"Unrecognized fee manager mode hash: '\".concat(managerModeHash, \"'\"));\n  }\n};","map":{"version":3,"sources":["/home/usuario/Escritorio/csd-bridge-ui/src/stores/utils/bridgeMode.js"],"names":["abi","HOME_ERC_TO_NATIVE_ABI","FOREIGN_ERC_TO_NATIVE_ABI","BRIDGE_MODES","NATIVE_TO_ERC","ERC_TO_ERC","ERC_TO_NATIVE","FEE_MANAGER_MODE","ONE_DIRECTION","BOTH_DIRECTIONS","UNDEFINED","ERC_TYPES","ERC677","ERC20","getBridgeABIs","bridgeMode","HOME_ABI","FOREIGN_ABI","HOME_NATIVE_TO_ERC_ABI","FOREIGN_NATIVE_TO_ERC_ABI","HOME_ERC_TO_ERC_ABI","FOREIGN_ERC_TO_ERC_ABI","Error","decodeBridgeMode","bridgeModeHash","getUnit","unitHome","unitForeign","decodeFeeManagerMode","managerModeHash"],"mappings":"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","sourcesContent":["//import { abi as HOME_NATIVE_TO_ERC_ABI } from '../../contracts/HomeBridgeNativeToErc.json'\n//import { abi as FOREIGN_NATIVE_TO_ERC_ABI } from '../../contracts/ForeignBridgeNativeToErc.json'\n//import { abi as HOME_ERC_TO_ERC_ABI } from '../../contracts/HomeBridgeErcToErc.json'\n//import { abi as FOREIGN_ERC_TO_ERC_ABI } from '../../contracts/ForeignBridgeErcToErc.json'\nimport { abi as HOME_ERC_TO_NATIVE_ABI } from '../../contracts/HomeBridgeErcToNative.json'\nimport { abi as FOREIGN_ERC_TO_NATIVE_ABI } from '../../contracts/ForeignBridgeErcToNative.json'\n\nexport const BRIDGE_MODES = {\n  NATIVE_TO_ERC: 'NATIVE_TO_ERC',\n  ERC_TO_ERC: 'ERC_TO_ERC',\n  ERC_TO_NATIVE: 'ERC_TO_NATIVE'\n}\n\nexport const FEE_MANAGER_MODE = {\n  ONE_DIRECTION: 'ONE_DIRECTION',\n  BOTH_DIRECTIONS: 'BOTH_DIRECTIONS',\n  UNDEFINED: 'UNDEFINED'\n}\n\nexport const ERC_TYPES = {\n  ERC677: 'ERC677',\n  ERC20: 'ERC20'\n}\n\nexport const getBridgeABIs = (bridgeMode) => {\n  let HOME_ABI = null\n  let FOREIGN_ABI = null\n  if (bridgeMode === BRIDGE_MODES.NATIVE_TO_ERC) {\n    HOME_ABI = HOME_NATIVE_TO_ERC_ABI\n    FOREIGN_ABI = FOREIGN_NATIVE_TO_ERC_ABI\n  } else if (bridgeMode === BRIDGE_MODES.ERC_TO_ERC) {\n    HOME_ABI = HOME_ERC_TO_ERC_ABI\n    FOREIGN_ABI = FOREIGN_ERC_TO_ERC_ABI\n  } else if (bridgeMode === BRIDGE_MODES.ERC_TO_NATIVE) {\n    HOME_ABI = HOME_ERC_TO_NATIVE_ABI\n    FOREIGN_ABI = FOREIGN_ERC_TO_NATIVE_ABI\n  } else {\n    throw new Error(`Unrecognized bridge mode: ${bridgeMode}`)\n  }\n\n  return { HOME_ABI, FOREIGN_ABI }\n}\n\nexport const decodeBridgeMode = (bridgeModeHash)  => {\n  switch (bridgeModeHash) {\n    case '0x92a8d7fe':\n      return BRIDGE_MODES.NATIVE_TO_ERC\n    case '0xba4690f5':\n      return BRIDGE_MODES.ERC_TO_ERC\n    case '0x18762d46':\n      return BRIDGE_MODES.ERC_TO_NATIVE\n    default:\n      throw new Error(`Unrecognized bridge mode hash: '${bridgeModeHash}'`)\n  }\n}\n\nexport const getUnit = (bridgeMode) => {\n  let unitHome = null\n  let unitForeign = null\n  if (bridgeMode === BRIDGE_MODES.NATIVE_TO_ERC) {\n    unitHome = 'Native coins'\n    unitForeign = 'Tokens'\n  } else if (bridgeMode === BRIDGE_MODES.ERC_TO_ERC) {\n    unitHome = 'Tokens'\n    unitForeign = 'Tokens'\n  } else if (bridgeMode === BRIDGE_MODES.ERC_TO_NATIVE) {\n    unitHome = 'Native coins'\n    unitForeign = 'Tokens'\n  } else {\n    throw new Error(`Unrecognized bridge mode: ${bridgeMode}`)\n  }\n\n  return { unitHome, unitForeign }\n}\n\nexport const decodeFeeManagerMode = (managerModeHash)  => {\n  switch (managerModeHash) {\n    case '0xf2aed8f7':\n      return FEE_MANAGER_MODE.ONE_DIRECTION\n    case '0xd7de965f':\n      return FEE_MANAGER_MODE.BOTH_DIRECTIONS\n    default:\n      throw new Error(`Unrecognized fee manager mode hash: '${managerModeHash}'`)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}