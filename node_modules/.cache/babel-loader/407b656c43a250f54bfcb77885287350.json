{"ast":null,"code":"import _regeneratorRuntime from \"/home/usuario/Escritorio/csd-bridge-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/usuario/Escritorio/csd-bridge-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _initializerDefineProperty from \"/home/usuario/Escritorio/csd-bridge-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty\";\nimport _classCallCheck from \"/home/usuario/Escritorio/csd-bridge-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/usuario/Escritorio/csd-bridge-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _applyDecoratedDescriptor from \"/home/usuario/Escritorio/csd-bridge-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"/home/usuario/Escritorio/csd-bridge-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerWarningHelper\";\n\nvar _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18, _descriptor19, _descriptor20, _descriptor21, _temp;\n\nimport { action, observable } from 'mobx';\nimport { abi as ERC677_ABI } from '../contracts/ERC677BridgeToken.json';\nimport { getBlockNumber as _getBlockNumber } from './utils/web3';\nimport { getMaxPerTxLimit as _getMaxPerTxLimit, getMinPerTxLimit as _getMinPerTxLimit, getCurrentLimit as _getCurrentLimit, getPastEvents, getTotalSupply, getBalanceOf, getErc677TokenAddress, getSymbol, getDecimals, getErc20TokenAddress, getName, getFeeManager, getHomeFee, getFeeManagerMode, ZERO_ADDRESS, getDeployedAtBlock, getValidatorList, getTokenType } from './utils/contract';\nimport { balanceLoaded, removePendingTransaction } from './utils/testUtils';\nimport sleep from './utils/sleep';\nimport { getBridgeABIs, getUnit, BRIDGE_MODES, decodeFeeManagerMode, FEE_MANAGER_MODE } from './utils/bridgeMode';\nimport { abi as BRIDGE_VALIDATORS_ABI } from '../contracts/BridgeValidators';\nimport ERC20Bytes32Abi from './utils/ERC20Bytes32.abi';\nimport BN from 'bignumber.js';\nimport { processLargeArrayAsync } from \"./utils/array\";\nimport { fromDecimals } from \"./utils/decimals\";\nvar ForeignStore = (_class = (_temp =\n/*#__PURE__*/\nfunction () {\n  function ForeignStore(rootStore) {\n    var _this = this;\n\n    _classCallCheck(this, ForeignStore);\n\n    _initializerDefineProperty(this, \"state\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"loading\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"events\", _descriptor3, this);\n\n    _initializerDefineProperty(this, \"totalSupply\", _descriptor4, this);\n\n    _initializerDefineProperty(this, \"symbol\", _descriptor5, this);\n\n    _initializerDefineProperty(this, \"tokenName\", _descriptor6, this);\n\n    _initializerDefineProperty(this, \"balance\", _descriptor7, this);\n\n    _initializerDefineProperty(this, \"filter\", _descriptor8, this);\n\n    _initializerDefineProperty(this, \"maxCurrentDeposit\", _descriptor9, this);\n\n    _initializerDefineProperty(this, \"maxPerTx\", _descriptor10, this);\n\n    _initializerDefineProperty(this, \"minPerTx\", _descriptor11, this);\n\n    _initializerDefineProperty(this, \"latestBlockNumber\", _descriptor12, this);\n\n    _initializerDefineProperty(this, \"validators\", _descriptor13, this);\n\n    _initializerDefineProperty(this, \"validatorsCount\", _descriptor14, this);\n\n    _initializerDefineProperty(this, \"foreignBridgeValidators\", _descriptor15, this);\n\n    _initializerDefineProperty(this, \"requiredSignatures\", _descriptor16, this);\n\n    _initializerDefineProperty(this, \"dailyLimit\", _descriptor17, this);\n\n    _initializerDefineProperty(this, \"totalSpentPerDay\", _descriptor18, this);\n\n    _initializerDefineProperty(this, \"tokenAddress\", _descriptor19, this);\n\n    _initializerDefineProperty(this, \"feeEventsFinished\", _descriptor20, this);\n\n    _initializerDefineProperty(this, \"tokenType\", _descriptor21, this);\n\n    this.feeManager = {\n      totalFeeDistributedFromSignatures: BN(0),\n      totalFeeDistributedFromAffirmation: BN(0)\n    };\n    this.networkName = process.env.REACT_APP_FOREIGN_NETWORK_NAME || 'Unknown';\n    this.filteredBlockNumber = 0;\n    this.foreignBridge = {};\n    this.tokenContract = {};\n    this.tokenDecimals = 6;\n    this.FOREIGN_BRIDGE_ADDRESS = process.env.REACT_APP_FOREIGN_BRIDGE_ADDRESS;\n    this.explorerTxTemplate = process.env.REACT_APP_FOREIGN_EXPLORER_TX_TEMPLATE || '';\n    this.explorerAddressTemplate = process.env.REACT_APP_FOREIGN_EXPLORER_ADDRESS_TEMPLATE || '';\n\n    this.processEvent = function (event) {\n      if (event.event === \"FeeDistributedFromSignatures\") {\n        _this.feeManager.totalFeeDistributedFromSignatures = _this.feeManager.totalFeeDistributedFromSignatures.plus(BN(fromDecimals(event.returnValues.feeAmount, _this.tokenDecimals)));\n      } else if (event.event === \"FeeDistributedFromAffirmation\") {\n        _this.feeManager.totalFeeDistributedFromAffirmation = _this.feeManager.totalFeeDistributedFromAffirmation.plus(BN(fromDecimals(event.returnValues.feeAmount, _this.tokenDecimals)));\n      }\n    };\n\n    this.web3Store = rootStore.web3Store;\n    this.foreignWeb3 = rootStore.web3Store.foreignWeb3;\n    this.alertStore = rootStore.alertStore;\n    this.homeStore = rootStore.homeStore;\n    this.rootStore = rootStore;\n    this.waitingForConfirmation = new Set();\n    this.setForeign();\n  }\n\n  _createClass(ForeignStore, [{\n    key: \"setForeign\",\n    value: function () {\n      var _setForeign = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var _this2 = this;\n\n        var _getBridgeABIs, FOREIGN_ABI;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (this.rootStore.bridgeModeInitialized) {\n                  _context.next = 3;\n                  break;\n                }\n\n                setTimeout(function () {\n                  return _this2.setForeign();\n                }, 200);\n                return _context.abrupt(\"return\");\n\n              case 3:\n                _getBridgeABIs = getBridgeABIs(this.rootStore.bridgeMode), FOREIGN_ABI = _getBridgeABIs.FOREIGN_ABI;\n                console.log(FOREIGN_ABI);\n                this.foreignBridge = new this.foreignWeb3.eth.Contract(FOREIGN_ABI, this.FOREIGN_BRIDGE_ADDRESS);\n                _context.next = 8;\n                return this.getBlockNumber();\n\n              case 8:\n                _context.next = 10;\n                return this.getTokenInfo();\n\n              case 10:\n                this.getMinPerTxLimit();\n                this.getMaxPerTxLimit();\n                this.getEvents();\n                this.getTokenBalance();\n                this.getCurrentLimit();\n                this.getFee();\n                this.getValidators();\n                this.getFeeEvents();\n                setInterval(function () {\n                  _this2.getBlockNumber();\n\n                  _this2.getEvents();\n\n                  _this2.getTokenBalance();\n\n                  _this2.getCurrentLimit();\n                }, 15000);\n\n              case 19:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function setForeign() {\n        return _setForeign.apply(this, arguments);\n      }\n\n      return setForeign;\n    }()\n  }, {\n    key: \"getBlockNumber\",\n    value: function () {\n      var _getBlockNumber2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n                _context2.next = 3;\n                return _getBlockNumber(this.foreignWeb3);\n\n              case 3:\n                this.latestBlockNumber = _context2.sent;\n                _context2.next = 9;\n                break;\n\n              case 6:\n                _context2.prev = 6;\n                _context2.t0 = _context2[\"catch\"](0);\n                console.error(_context2.t0);\n\n              case 9:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[0, 6]]);\n      }));\n\n      function getBlockNumber() {\n        return _getBlockNumber2.apply(this, arguments);\n      }\n\n      return getBlockNumber;\n    }()\n  }, {\n    key: \"getMaxPerTxLimit\",\n    value: function () {\n      var _getMaxPerTxLimit2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.prev = 0;\n                _context3.next = 3;\n                return _getMaxPerTxLimit(this.foreignBridge, this.tokenDecimals);\n\n              case 3:\n                this.maxPerTx = _context3.sent;\n                _context3.next = 9;\n                break;\n\n              case 6:\n                _context3.prev = 6;\n                _context3.t0 = _context3[\"catch\"](0);\n                console.error(_context3.t0);\n\n              case 9:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[0, 6]]);\n      }));\n\n      function getMaxPerTxLimit() {\n        return _getMaxPerTxLimit2.apply(this, arguments);\n      }\n\n      return getMaxPerTxLimit;\n    }()\n  }, {\n    key: \"getMinPerTxLimit\",\n    value: function () {\n      var _getMinPerTxLimit2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4() {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.prev = 0;\n                _context4.next = 3;\n                return _getMinPerTxLimit(this.foreignBridge, this.tokenDecimals);\n\n              case 3:\n                this.minPerTx = _context4.sent;\n                _context4.next = 9;\n                break;\n\n              case 6:\n                _context4.prev = 6;\n                _context4.t0 = _context4[\"catch\"](0);\n                console.error(_context4.t0);\n\n              case 9:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[0, 6]]);\n      }));\n\n      function getMinPerTxLimit() {\n        return _getMinPerTxLimit2.apply(this, arguments);\n      }\n\n      return getMinPerTxLimit;\n    }()\n  }, {\n    key: \"getTokenInfo\",\n    value: function () {\n      var _getTokenInfo = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5() {\n        var alternativeContract;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.prev = 0;\n\n                if (!(this.rootStore.bridgeMode === BRIDGE_MODES.ERC_TO_ERC || this.rootStore.bridgeMode === BRIDGE_MODES.ERC_TO_NATIVE)) {\n                  _context5.next = 7;\n                  break;\n                }\n\n                _context5.next = 4;\n                return getErc20TokenAddress(this.foreignBridge);\n\n              case 4:\n                _context5.t0 = _context5.sent;\n                _context5.next = 10;\n                break;\n\n              case 7:\n                _context5.next = 9;\n                return getErc677TokenAddress(this.foreignBridge);\n\n              case 9:\n                _context5.t0 = _context5.sent;\n\n              case 10:\n                this.tokenAddress = _context5.t0;\n                this.tokenContract = new this.foreignWeb3.eth.Contract(ERC677_ABI, this.tokenAddress);\n                _context5.next = 14;\n                return getTokenType(this.tokenContract, this.FOREIGN_BRIDGE_ADDRESS);\n\n              case 14:\n                this.tokenType = _context5.sent;\n                alternativeContract = new this.foreignWeb3.eth.Contract(ERC20Bytes32Abi, this.tokenAddress);\n                _context5.prev = 16;\n                _context5.next = 19;\n                return getSymbol(this.tokenContract);\n\n              case 19:\n                this.symbol = _context5.sent;\n                _context5.next = 29;\n                break;\n\n              case 22:\n                _context5.prev = 22;\n                _context5.t1 = _context5[\"catch\"](16);\n                _context5.t2 = this.foreignWeb3.utils;\n                _context5.next = 27;\n                return getSymbol(alternativeContract);\n\n              case 27:\n                _context5.t3 = _context5.sent;\n                this.symbol = _context5.t2.hexToAscii.call(_context5.t2, _context5.t3).replace(/\\u0000*$/, '');\n\n              case 29:\n                _context5.prev = 29;\n                _context5.next = 32;\n                return getName(this.tokenContract);\n\n              case 32:\n                this.tokenName = _context5.sent;\n                _context5.next = 42;\n                break;\n\n              case 35:\n                _context5.prev = 35;\n                _context5.t4 = _context5[\"catch\"](29);\n                _context5.t5 = this.foreignWeb3.utils;\n                _context5.next = 40;\n                return getName(alternativeContract);\n\n              case 40:\n                _context5.t6 = _context5.sent;\n                this.tokenName = _context5.t5.hexToAscii.call(_context5.t5, _context5.t6).replace(/\\u0000*$/, '');\n\n              case 42:\n                _context5.next = 44;\n                return getDecimals(this.tokenContract);\n\n              case 44:\n                this.tokenDecimals = _context5.sent;\n                _context5.next = 50;\n                break;\n\n              case 47:\n                _context5.prev = 47;\n                _context5.t7 = _context5[\"catch\"](0);\n                console.error(_context5.t7);\n\n              case 50:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this, [[0, 47], [16, 22], [29, 35]]);\n      }));\n\n      function getTokenInfo() {\n        return _getTokenInfo.apply(this, arguments);\n      }\n\n      return getTokenInfo;\n    }()\n  }, {\n    key: \"getTokenBalance\",\n    value: function () {\n      var _getTokenBalance = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee7() {\n        var _this3 = this;\n\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.prev = 0;\n                _context7.next = 3;\n                return getTotalSupply(this.tokenContract);\n\n              case 3:\n                this.totalSupply = _context7.sent;\n                this.web3Store.getWeb3Promise.then(\n                /*#__PURE__*/\n                _asyncToGenerator(\n                /*#__PURE__*/\n                _regeneratorRuntime.mark(function _callee6() {\n                  return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n                    while (1) {\n                      switch (_context6.prev = _context6.next) {\n                        case 0:\n                          _context6.next = 2;\n                          return getBalanceOf(_this3.tokenContract, _this3.web3Store.defaultAccount.address);\n\n                        case 2:\n                          _this3.balance = _context6.sent;\n                          balanceLoaded();\n\n                        case 4:\n                        case \"end\":\n                          return _context6.stop();\n                      }\n                    }\n                  }, _callee6);\n                })));\n                _context7.next = 10;\n                break;\n\n              case 7:\n                _context7.prev = 7;\n                _context7.t0 = _context7[\"catch\"](0);\n                console.error(_context7.t0);\n\n              case 10:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this, [[0, 7]]);\n      }));\n\n      function getTokenBalance() {\n        return _getTokenBalance.apply(this, arguments);\n      }\n\n      return getTokenBalance;\n    }()\n  }, {\n    key: \"getFee\",\n    value: function () {\n      var _getFee = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee8() {\n        var feeManager, feeManagerModeHash;\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.next = 2;\n                return getFeeManager(this.foreignBridge);\n\n              case 2:\n                feeManager = _context8.sent;\n\n                if (!(feeManager !== ZERO_ADDRESS)) {\n                  _context8.next = 15;\n                  break;\n                }\n\n                _context8.next = 6;\n                return getFeeManagerMode(this.foreignBridge);\n\n              case 6:\n                feeManagerModeHash = _context8.sent;\n                this.feeManager.feeManagerMode = decodeFeeManagerMode(feeManagerModeHash);\n\n                if (!(this.feeManager.feeManagerMode === FEE_MANAGER_MODE.ONE_DIRECTION)) {\n                  _context8.next = 13;\n                  break;\n                }\n\n                this.feeManager.foreignFee = new BN(0);\n                _context8.next = 12;\n                return getHomeFee(this.foreignBridge);\n\n              case 12:\n                this.feeManager.homeFee = _context8.sent;\n\n              case 13:\n                _context8.next = 18;\n                break;\n\n              case 15:\n                this.feeManager.feeManagerMode = FEE_MANAGER_MODE.UNDEFINED;\n                this.feeManager.homeFee = new BN(0);\n                this.feeManager.foreignFee = new BN(0);\n\n              case 18:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function getFee() {\n        return _getFee.apply(this, arguments);\n      }\n\n      return getFee;\n    }()\n  }, {\n    key: \"getEvents\",\n    value: function () {\n      var _getEvents = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee10(fromBlock, toBlock) {\n        var _this4 = this;\n\n        var foreignEvents, confirmationEvents;\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                _context10.prev = 0;\n                fromBlock = fromBlock || this.filteredBlockNumber || this.latestBlockNumber - 50;\n                toBlock = toBlock || this.filteredBlockNumber || \"latest\";\n\n                if (fromBlock < 0) {\n                  fromBlock = 0;\n                }\n\n                _context10.next = 6;\n                return getPastEvents(this.foreignBridge, fromBlock, toBlock).catch(function (e) {\n                  console.error('Couldn\\'t get events', e);\n                  return [];\n                });\n\n              case 6:\n                foreignEvents = _context10.sent;\n\n                if (!this.filter) {\n                  this.events = foreignEvents;\n                }\n\n                if (this.waitingForConfirmation.size) {\n                  confirmationEvents = foreignEvents.filter(function (event) {\n                    return event.event === \"RelayedMessage\" && _this4.waitingForConfirmation.has(event.returnValues.transactionHash);\n                  });\n                  confirmationEvents.forEach(\n                  /*#__PURE__*/\n                  function () {\n                    var _ref2 = _asyncToGenerator(\n                    /*#__PURE__*/\n                    _regeneratorRuntime.mark(function _callee9(event) {\n                      var TxReceipt, urlExplorer, unitReceived;\n                      return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n                        while (1) {\n                          switch (_context9.prev = _context9.next) {\n                            case 0:\n                              _context9.next = 2;\n                              return _this4.getTxReceipt(event.transactionHash);\n\n                            case 2:\n                              TxReceipt = _context9.sent;\n\n                              if (TxReceipt && TxReceipt.logs && TxReceipt.logs.length > 1 && _this4.waitingForConfirmation.size) {\n                                _this4.alertStore.setLoadingStepIndex(3);\n\n                                urlExplorer = _this4.getExplorerTxUrl(event.transactionHash);\n                                unitReceived = getUnit(_this4.rootStore.bridgeMode).unitForeign;\n                                setTimeout(function () {\n                                  _this4.alertStore.pushSuccess(\"\".concat(unitReceived, \" received on \").concat(_this4.networkName, \" on Tx\\n            <a href='\").concat(urlExplorer, \"' target='blank' style=\\\"overflow-wrap: break-word;word-wrap: break-word;\\\">\\n            \").concat(event.transactionHash, \"</a>\"), _this4.alertStore.FOREIGN_TRANSFER_SUCCESS);\n                                }, 2000);\n\n                                _this4.waitingForConfirmation.delete(event.returnValues.transactionHash);\n                              }\n\n                            case 4:\n                            case \"end\":\n                              return _context9.stop();\n                          }\n                        }\n                      }, _callee9);\n                    }));\n\n                    return function (_x3) {\n                      return _ref2.apply(this, arguments);\n                    };\n                  }());\n\n                  if (confirmationEvents.length) {\n                    removePendingTransaction();\n                  }\n                }\n\n                return _context10.abrupt(\"return\", foreignEvents);\n\n              case 12:\n                _context10.prev = 12;\n                _context10.t0 = _context10[\"catch\"](0);\n                this.alertStore.pushError(\"Cannot establish connection to Foreign Network.\\n\\n                 Please make sure you have set it up in env variables\", this.alertStore.FOREIGN_CONNECTION_ERROR);\n\n              case 15:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this, [[0, 12]]);\n      }));\n\n      function getEvents(_x, _x2) {\n        return _getEvents.apply(this, arguments);\n      }\n\n      return getEvents;\n    }()\n  }, {\n    key: \"getCurrentLimit\",\n    value: function () {\n      var _getCurrentLimit2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee11() {\n        var result;\n        return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                _context11.prev = 0;\n                _context11.next = 3;\n                return _getCurrentLimit(this.foreignBridge, this.tokenDecimals);\n\n              case 3:\n                result = _context11.sent;\n                this.maxCurrentDeposit = result.maxCurrentDeposit;\n                this.dailyLimit = result.dailyLimit;\n                this.totalSpentPerDay = result.totalSpentPerDay;\n                _context11.next = 12;\n                break;\n\n              case 9:\n                _context11.prev = 9;\n                _context11.t0 = _context11[\"catch\"](0);\n                console.error(_context11.t0);\n\n              case 12:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this, [[0, 9]]);\n      }));\n\n      function getCurrentLimit() {\n        return _getCurrentLimit2.apply(this, arguments);\n      }\n\n      return getCurrentLimit;\n    }()\n  }, {\n    key: \"filterByTxHashInReturnValues\",\n    value: function () {\n      var _filterByTxHashInReturnValues = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee12(transactionHash) {\n        return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                this.getTxAndRelatedEvents(transactionHash);\n\n              case 1:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n\n      function filterByTxHashInReturnValues(_x4) {\n        return _filterByTxHashInReturnValues.apply(this, arguments);\n      }\n\n      return filterByTxHashInReturnValues;\n    }()\n  }, {\n    key: \"filterByTxHash\",\n    value: function () {\n      var _filterByTxHash = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee13(transactionHash) {\n        return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                this.homeStore.filterByTxHashInReturnValues(transactionHash);\n                _context13.next = 3;\n                return this.getTxAndRelatedEvents(transactionHash);\n\n              case 3:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n\n      function filterByTxHash(_x5) {\n        return _filterByTxHash.apply(this, arguments);\n      }\n\n      return filterByTxHash;\n    }()\n  }, {\n    key: \"getTxAndRelatedEvents\",\n    value: function () {\n      var _getTxAndRelatedEvents = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee14(transactionHash) {\n        var txReceipt, from, to, events;\n        return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                _context14.prev = 0;\n                _context14.next = 3;\n                return this.getTxReceipt(transactionHash);\n\n              case 3:\n                txReceipt = _context14.sent;\n                from = txReceipt.blockNumber - 20;\n                to = txReceipt.blockNumber + 20;\n                _context14.next = 8;\n                return this.getEvents(from, to);\n\n              case 8:\n                events = _context14.sent;\n                this.events = events.filter(function (event) {\n                  return event.transactionHash === transactionHash || event.signedTxHash === transactionHash;\n                });\n                _context14.next = 15;\n                break;\n\n              case 12:\n                _context14.prev = 12;\n                _context14.t0 = _context14[\"catch\"](0);\n                this.events = [];\n\n              case 15:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this, [[0, 12]]);\n      }));\n\n      function getTxAndRelatedEvents(_x6) {\n        return _getTxAndRelatedEvents.apply(this, arguments);\n      }\n\n      return getTxAndRelatedEvents;\n    }()\n  }, {\n    key: \"setBlockFilter\",\n    value: function () {\n      var _setBlockFilter = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee15(blockNumber) {\n        return _regeneratorRuntime.wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                this.filteredBlockNumber = blockNumber;\n                _context15.next = 3;\n                return this.getEvents();\n\n              case 3:\n                this.events = _context15.sent;\n\n              case 4:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this);\n      }));\n\n      function setBlockFilter(_x7) {\n        return _setBlockFilter.apply(this, arguments);\n      }\n\n      return setBlockFilter;\n    }()\n  }, {\n    key: \"setFilter\",\n    value: function setFilter(value) {\n      this.filter = value;\n    }\n  }, {\n    key: \"addWaitingForConfirmation\",\n    value: function addWaitingForConfirmation(hash) {\n      this.waitingForConfirmation.add(hash);\n      this.setBlockFilter(0);\n      this.homeStore.setBlockFilter(0);\n    }\n  }, {\n    key: \"getTxReceipt\",\n    value: function getTxReceipt(hash) {\n      return this.foreignWeb3.eth.getTransactionReceipt(hash);\n    }\n  }, {\n    key: \"getDailyQuotaCompleted\",\n    value: function getDailyQuotaCompleted() {\n      return this.dailyLimit ? this.totalSpentPerDay / this.dailyLimit * 100 : 0;\n    }\n  }, {\n    key: \"waitUntilProcessed\",\n    value: function () {\n      var _waitUntilProcessed = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee16(txHash) {\n        var _this5 = this;\n\n        var bridge, processed;\n        return _regeneratorRuntime.wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                bridge = this.foreignBridge;\n                _context16.next = 3;\n                return bridge.methods.relayedMessages(txHash).call();\n\n              case 3:\n                processed = _context16.sent;\n\n                if (!processed) {\n                  _context16.next = 8;\n                  break;\n                }\n\n                return _context16.abrupt(\"return\", Promise.resolve());\n\n              case 8:\n                return _context16.abrupt(\"return\", sleep(5000).then(function () {\n                  return _this5.waitUntilProcessed(txHash);\n                }));\n\n              case 9:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee16, this);\n      }));\n\n      function waitUntilProcessed(_x8) {\n        return _waitUntilProcessed.apply(this, arguments);\n      }\n\n      return waitUntilProcessed;\n    }()\n  }, {\n    key: \"getExplorerTxUrl\",\n    value: function getExplorerTxUrl(txHash) {\n      return this.explorerTxTemplate.replace('%s', txHash);\n    }\n  }, {\n    key: \"getExplorerAddressUrl\",\n    value: function getExplorerAddressUrl(address) {\n      return this.explorerAddressTemplate.replace('%s', address);\n    }\n  }, {\n    key: \"getValidators\",\n    value: function () {\n      var _getValidators = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee17() {\n        var foreignValidatorsAddress;\n        return _regeneratorRuntime.wrap(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                _context17.prev = 0;\n                _context17.next = 3;\n                return this.foreignBridge.methods.validatorContract().call();\n\n              case 3:\n                foreignValidatorsAddress = _context17.sent;\n                this.foreignBridgeValidators = new this.foreignWeb3.eth.Contract(BRIDGE_VALIDATORS_ABI, foreignValidatorsAddress);\n                _context17.next = 7;\n                return this.foreignBridgeValidators.methods.requiredSignatures().call();\n\n              case 7:\n                this.requiredSignatures = _context17.sent;\n                _context17.next = 10;\n                return this.foreignBridgeValidators.methods.validatorCount().call();\n\n              case 10:\n                this.validatorsCount = _context17.sent;\n                _context17.next = 13;\n                return getValidatorList(foreignValidatorsAddress, this.foreignWeb3.eth);\n\n              case 13:\n                this.validators = _context17.sent;\n                _context17.next = 19;\n                break;\n\n              case 16:\n                _context17.prev = 16;\n                _context17.t0 = _context17[\"catch\"](0);\n                console.error(_context17.t0);\n\n              case 19:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n        }, _callee17, this, [[0, 16]]);\n      }));\n\n      function getValidators() {\n        return _getValidators.apply(this, arguments);\n      }\n\n      return getValidators;\n    }()\n  }, {\n    key: \"getFeeEvents\",\n    value: function () {\n      var _getFeeEvents = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee18() {\n        var _this6 = this;\n\n        var deployedAtBlock, events;\n        return _regeneratorRuntime.wrap(function _callee18$(_context18) {\n          while (1) {\n            switch (_context18.prev = _context18.next) {\n              case 0:\n                _context18.prev = 0;\n                _context18.next = 3;\n                return getDeployedAtBlock(this.foreignBridge);\n\n              case 3:\n                deployedAtBlock = _context18.sent;\n                _context18.next = 6;\n                return getPastEvents(this.foreignBridge, deployedAtBlock, 'latest');\n\n              case 6:\n                events = _context18.sent;\n                processLargeArrayAsync(events, this.processEvent, function () {\n                  _this6.feeEventsFinished = true;\n                });\n                _context18.next = 14;\n                break;\n\n              case 10:\n                _context18.prev = 10;\n                _context18.t0 = _context18[\"catch\"](0);\n                console.error(_context18.t0);\n                this.getFeeEvents();\n\n              case 14:\n              case \"end\":\n                return _context18.stop();\n            }\n          }\n        }, _callee18, this, [[0, 10]]);\n      }));\n\n      function getFeeEvents() {\n        return _getFeeEvents.apply(this, arguments);\n      }\n\n      return getFeeEvents;\n    }()\n  }]);\n\n  return ForeignStore;\n}(), _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"state\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return null;\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"loading\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return true;\n  }\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"events\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return [];\n  }\n}), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, \"totalSupply\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return '';\n  }\n}), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, \"symbol\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return 'NOSYM';\n  }\n}), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, \"tokenName\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return '';\n  }\n}), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, \"balance\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return '';\n  }\n}), _descriptor8 = _applyDecoratedDescriptor(_class.prototype, \"filter\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return false;\n  }\n}), _descriptor9 = _applyDecoratedDescriptor(_class.prototype, \"maxCurrentDeposit\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return '';\n  }\n}), _descriptor10 = _applyDecoratedDescriptor(_class.prototype, \"maxPerTx\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return '';\n  }\n}), _descriptor11 = _applyDecoratedDescriptor(_class.prototype, \"minPerTx\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return '';\n  }\n}), _descriptor12 = _applyDecoratedDescriptor(_class.prototype, \"latestBlockNumber\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return 0;\n  }\n}), _descriptor13 = _applyDecoratedDescriptor(_class.prototype, \"validators\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return [];\n  }\n}), _descriptor14 = _applyDecoratedDescriptor(_class.prototype, \"validatorsCount\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return 0;\n  }\n}), _descriptor15 = _applyDecoratedDescriptor(_class.prototype, \"foreignBridgeValidators\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return '';\n  }\n}), _descriptor16 = _applyDecoratedDescriptor(_class.prototype, \"requiredSignatures\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return 0;\n  }\n}), _descriptor17 = _applyDecoratedDescriptor(_class.prototype, \"dailyLimit\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return 0;\n  }\n}), _descriptor18 = _applyDecoratedDescriptor(_class.prototype, \"totalSpentPerDay\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return 0;\n  }\n}), _descriptor19 = _applyDecoratedDescriptor(_class.prototype, \"tokenAddress\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return '';\n  }\n}), _descriptor20 = _applyDecoratedDescriptor(_class.prototype, \"feeEventsFinished\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return false;\n  }\n}), _descriptor21 = _applyDecoratedDescriptor(_class.prototype, \"tokenType\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return '';\n  }\n}), _applyDecoratedDescriptor(_class.prototype, \"getBlockNumber\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"getBlockNumber\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"getMaxPerTxLimit\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"getMaxPerTxLimit\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"getMinPerTxLimit\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"getMinPerTxLimit\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"getTokenInfo\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"getTokenInfo\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"getTokenBalance\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"getTokenBalance\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"getFee\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"getFee\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"getEvents\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"getEvents\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"getCurrentLimit\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"getCurrentLimit\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"filterByTxHashInReturnValues\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"filterByTxHashInReturnValues\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"filterByTxHash\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"filterByTxHash\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"getTxAndRelatedEvents\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"getTxAndRelatedEvents\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"setBlockFilter\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"setBlockFilter\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"setFilter\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"setFilter\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"getValidators\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"getValidators\"), _class.prototype)), _class);\nexport default ForeignStore;","map":{"version":3,"sources":["/home/usuario/Escritorio/csd-bridge-ui/src/stores/ForeignStore.js"],"names":["action","observable","abi","ERC677_ABI","getBlockNumber","getMaxPerTxLimit","getMinPerTxLimit","getCurrentLimit","getPastEvents","getTotalSupply","getBalanceOf","getErc677TokenAddress","getSymbol","getDecimals","getErc20TokenAddress","getName","getFeeManager","getHomeFee","getFeeManagerMode","ZERO_ADDRESS","getDeployedAtBlock","getValidatorList","getTokenType","balanceLoaded","removePendingTransaction","sleep","getBridgeABIs","getUnit","BRIDGE_MODES","decodeFeeManagerMode","FEE_MANAGER_MODE","BRIDGE_VALIDATORS_ABI","ERC20Bytes32Abi","BN","processLargeArrayAsync","fromDecimals","ForeignStore","rootStore","feeManager","totalFeeDistributedFromSignatures","totalFeeDistributedFromAffirmation","networkName","process","env","REACT_APP_FOREIGN_NETWORK_NAME","filteredBlockNumber","foreignBridge","tokenContract","tokenDecimals","FOREIGN_BRIDGE_ADDRESS","REACT_APP_FOREIGN_BRIDGE_ADDRESS","explorerTxTemplate","REACT_APP_FOREIGN_EXPLORER_TX_TEMPLATE","explorerAddressTemplate","REACT_APP_FOREIGN_EXPLORER_ADDRESS_TEMPLATE","processEvent","event","plus","returnValues","feeAmount","web3Store","foreignWeb3","alertStore","homeStore","waitingForConfirmation","Set","setForeign","bridgeModeInitialized","setTimeout","bridgeMode","FOREIGN_ABI","console","log","eth","Contract","getTokenInfo","getEvents","getTokenBalance","getFee","getValidators","getFeeEvents","setInterval","latestBlockNumber","error","maxPerTx","minPerTx","ERC_TO_ERC","ERC_TO_NATIVE","tokenAddress","tokenType","alternativeContract","symbol","utils","hexToAscii","replace","tokenName","totalSupply","getWeb3Promise","then","defaultAccount","address","balance","feeManagerModeHash","feeManagerMode","ONE_DIRECTION","foreignFee","homeFee","UNDEFINED","fromBlock","toBlock","catch","e","foreignEvents","filter","events","size","confirmationEvents","has","transactionHash","forEach","getTxReceipt","TxReceipt","logs","length","setLoadingStepIndex","urlExplorer","getExplorerTxUrl","unitReceived","unitForeign","pushSuccess","FOREIGN_TRANSFER_SUCCESS","delete","pushError","FOREIGN_CONNECTION_ERROR","result","maxCurrentDeposit","dailyLimit","totalSpentPerDay","getTxAndRelatedEvents","filterByTxHashInReturnValues","txReceipt","from","blockNumber","to","signedTxHash","value","hash","add","setBlockFilter","getTransactionReceipt","txHash","bridge","methods","relayedMessages","call","processed","Promise","resolve","waitUntilProcessed","validatorContract","foreignValidatorsAddress","foreignBridgeValidators","requiredSignatures","validatorCount","validatorsCount","validators","deployedAtBlock","feeEventsFinished"],"mappings":"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","sourcesContent":["import { action, observable } from 'mobx';\nimport { abi as ERC677_ABI } from '../contracts/ERC677BridgeToken.json';\nimport { getBlockNumber } from './utils/web3'\nimport {\n  getMaxPerTxLimit,\n  getMinPerTxLimit,\n  getCurrentLimit,\n  getPastEvents,\n  getTotalSupply,\n  getBalanceOf,\n  getErc677TokenAddress,\n  getSymbol,\n  getDecimals,\n  getErc20TokenAddress,\n  getName,\n  getFeeManager,\n  getHomeFee,\n  getFeeManagerMode,\n  ZERO_ADDRESS,\n  getDeployedAtBlock,\n  getValidatorList,\n  getTokenType\n} from './utils/contract'\nimport { balanceLoaded, removePendingTransaction } from './utils/testUtils'\nimport sleep from './utils/sleep'\nimport { getBridgeABIs, getUnit, BRIDGE_MODES, decodeFeeManagerMode, FEE_MANAGER_MODE } from './utils/bridgeMode'\nimport { abi as BRIDGE_VALIDATORS_ABI } from '../contracts/BridgeValidators'\nimport ERC20Bytes32Abi from './utils/ERC20Bytes32.abi'\nimport BN from 'bignumber.js'\nimport { processLargeArrayAsync } from \"./utils/array\"\nimport { fromDecimals } from \"./utils/decimals\"\n\nclass ForeignStore {\n  @observable state = null;\n  @observable loading = true;\n  @observable events = [];\n  @observable totalSupply = '';\n  @observable symbol = 'NOSYM';\n  @observable tokenName = '';\n  @observable balance = '';\n  @observable filter = false;\n  @observable maxCurrentDeposit = '';\n  @observable maxPerTx = '';\n  @observable minPerTx = '';\n  @observable latestBlockNumber = 0;\n  @observable validators = []\n  @observable validatorsCount = 0\n  @observable foreignBridgeValidators = ''\n  @observable requiredSignatures = 0\n  @observable dailyLimit = 0\n  @observable totalSpentPerDay = 0\n  @observable tokenAddress = '';\n  @observable feeEventsFinished = false\n  @observable tokenType = ''\n  feeManager = {\n    totalFeeDistributedFromSignatures: BN(0),\n    totalFeeDistributedFromAffirmation: BN(0)\n  };\n  networkName = process.env.REACT_APP_FOREIGN_NETWORK_NAME || 'Unknown'\n  filteredBlockNumber = 0;\n  foreignBridge = {};\n  tokenContract = {}\n  tokenDecimals = 6;\n  FOREIGN_BRIDGE_ADDRESS = process.env.REACT_APP_FOREIGN_BRIDGE_ADDRESS;\n  explorerTxTemplate = process.env.REACT_APP_FOREIGN_EXPLORER_TX_TEMPLATE || ''\n  explorerAddressTemplate = process.env.REACT_APP_FOREIGN_EXPLORER_ADDRESS_TEMPLATE || ''\n\n  constructor (rootStore) {\n    this.web3Store = rootStore.web3Store;\n    this.foreignWeb3 = rootStore.web3Store.foreignWeb3\n    this.alertStore = rootStore.alertStore\n    this.homeStore = rootStore.homeStore;\n    this.rootStore = rootStore\n    this.waitingForConfirmation = new Set()\n    this.setForeign()\n  }\n\n  async setForeign(){\n    if (!this.rootStore.bridgeModeInitialized) {\n      setTimeout(() => this.setForeign(), 200)\n      return\n    }\n    const { FOREIGN_ABI } = getBridgeABIs(this.rootStore.bridgeMode)\n    console.log(FOREIGN_ABI)\n    this.foreignBridge = new this.foreignWeb3.eth.Contract(FOREIGN_ABI, this.FOREIGN_BRIDGE_ADDRESS);\n    await this.getBlockNumber()\n    await this.getTokenInfo()\n    this.getMinPerTxLimit()\n    this.getMaxPerTxLimit()\n    this.getEvents()\n    this.getTokenBalance()\n    this.getCurrentLimit()\n    this.getFee()\n    this.getValidators()\n    this.getFeeEvents()\n    setInterval(() => {\n      this.getBlockNumber()\n      this.getEvents()\n      this.getTokenBalance()\n      this.getCurrentLimit()\n    }, 15000)\n  }\n\n  @action\n  async getBlockNumber() {\n    try {\n      this.latestBlockNumber = await getBlockNumber(this.foreignWeb3)\n    } catch(e){\n      console.error(e)\n    }\n  }\n\n  @action\n  async getMaxPerTxLimit(){\n    try {\n      this.maxPerTx = await getMaxPerTxLimit(this.foreignBridge,this.tokenDecimals)\n    } catch(e){\n      console.error(e)\n    }\n  }\n\n  @action\n  async getMinPerTxLimit(){\n    try {\n      this.minPerTx = await getMinPerTxLimit(this.foreignBridge,this.tokenDecimals)\n    } catch(e){\n      console.error(e)\n    }\n  }\n\n  @action\n  async getTokenInfo(){\n    try {\n      this.tokenAddress = this.rootStore.bridgeMode === BRIDGE_MODES.ERC_TO_ERC || this.rootStore.bridgeMode === BRIDGE_MODES.ERC_TO_NATIVE\n        ? await getErc20TokenAddress(this.foreignBridge)\n        : await getErc677TokenAddress(this.foreignBridge)\n      this.tokenContract = new this.foreignWeb3.eth.Contract(ERC677_ABI, this.tokenAddress);\n      this.tokenType = await getTokenType(this.tokenContract, this.FOREIGN_BRIDGE_ADDRESS)\n      const alternativeContract = new this.foreignWeb3.eth.Contract(ERC20Bytes32Abi, this.tokenAddress);\n      try {\n        this.symbol =await getSymbol(this.tokenContract)\n      } catch(e) {\n        this.symbol = this.foreignWeb3.utils.hexToAscii(await getSymbol(alternativeContract)).replace(/\\u0000*$/, '')\n      }\n      try {\n        this.tokenName = await getName(this.tokenContract)\n      } catch(e) {\n        this.tokenName = this.foreignWeb3.utils.hexToAscii(await getName(alternativeContract)).replace(/\\u0000*$/, '')\n      }\n\n      this.tokenDecimals = await getDecimals(this.tokenContract)\n\n    } catch(e) {\n      console.error(e)\n    }\n  }\n\n  @action\n  async getTokenBalance(){\n    try {\n      this.totalSupply = await getTotalSupply(this.tokenContract)\n      this.web3Store.getWeb3Promise.then(async () => {\n        this.balance = await getBalanceOf(this.tokenContract, this.web3Store.defaultAccount.address)\n        balanceLoaded()\n      })\n    } catch(e) {\n      console.error(e)\n    }\n  }\n\n  @action\n  async getFee() {\n    const feeManager = await getFeeManager(this.foreignBridge)\n    if (feeManager !== ZERO_ADDRESS) {\n      const feeManagerModeHash = await getFeeManagerMode(this.foreignBridge)\n      this.feeManager.feeManagerMode = decodeFeeManagerMode(feeManagerModeHash)\n\n      if(this.feeManager.feeManagerMode === FEE_MANAGER_MODE.ONE_DIRECTION) {\n        this.feeManager.foreignFee = new BN(0);\n        this.feeManager.homeFee = await getHomeFee(this.foreignBridge)\n      }\n    } else {\n      this.feeManager.feeManagerMode = FEE_MANAGER_MODE.UNDEFINED\n      this.feeManager.homeFee = new BN(0);\n      this.feeManager.foreignFee = new BN(0);\n    }\n  }\n\n\n  @action\n  async getEvents(fromBlock, toBlock) {\n    try {\n      fromBlock = fromBlock || this.filteredBlockNumber || this.latestBlockNumber - 50\n      toBlock =  toBlock || this.filteredBlockNumber || \"latest\"\n\n      if (fromBlock < 0) {\n        fromBlock = 0\n      }\n\n      let foreignEvents = await getPastEvents(this.foreignBridge, fromBlock, toBlock).catch(e => {\n        console.error('Couldn\\'t get events', e)\n        return []\n      })\n\n      if(!this.filter){\n        this.events = foreignEvents;\n      }\n\n      if(this.waitingForConfirmation.size) {\n        const confirmationEvents = foreignEvents.filter((event) => event.event === \"RelayedMessage\" && this.waitingForConfirmation.has(event.returnValues.transactionHash))\n        confirmationEvents.forEach(async event => {\n          const TxReceipt = await this.getTxReceipt(event.transactionHash)\n          if(TxReceipt && TxReceipt.logs && TxReceipt.logs.length > 1 && this.waitingForConfirmation.size) {\n            this.alertStore.setLoadingStepIndex(3)\n            const urlExplorer = this.getExplorerTxUrl(event.transactionHash)\n            const unitReceived = getUnit(this.rootStore.bridgeMode).unitForeign\n            setTimeout(() => {\n                this.alertStore.pushSuccess(`${unitReceived} received on ${this.networkName} on Tx\n            <a href='${urlExplorer}' target='blank' style=\"overflow-wrap: break-word;word-wrap: break-word;\">\n            ${event.transactionHash}</a>`, this.alertStore.FOREIGN_TRANSFER_SUCCESS)}\n              , 2000)\n            this.waitingForConfirmation.delete(event.returnValues.transactionHash)\n          }\n        })\n\n        if(confirmationEvents.length) {\n          removePendingTransaction()\n        }\n      }\n\n      return foreignEvents\n    } catch(e) {\n      this.alertStore.pushError(`Cannot establish connection to Foreign Network.\\n\n                 Please make sure you have set it up in env variables`, this.alertStore.FOREIGN_CONNECTION_ERROR)\n    }\n  }\n\n  @action\n  async getCurrentLimit(){\n    try {\n      const result = await getCurrentLimit(this.foreignBridge,this.tokenDecimals)\n      this.maxCurrentDeposit = result.maxCurrentDeposit\n      this.dailyLimit = result.dailyLimit\n      this.totalSpentPerDay = result.totalSpentPerDay\n    } catch(e){\n      console.error(e)\n    }\n  }\n\n  @action\n  async filterByTxHashInReturnValues(transactionHash) {\n    this.getTxAndRelatedEvents(transactionHash)\n  }\n\n  @action\n  async filterByTxHash(transactionHash) {\n    this.homeStore.filterByTxHashInReturnValues(transactionHash)\n    await this.getTxAndRelatedEvents(transactionHash)\n  }\n\n  @action\n  async getTxAndRelatedEvents(transactionHash) {\n    try {\n      const txReceipt = await this.getTxReceipt(transactionHash)\n      const from = txReceipt.blockNumber - 20\n      const to = txReceipt.blockNumber + 20\n      const events = await this.getEvents(from, to);\n      this.events = events.filter((event) => event.transactionHash === transactionHash || event.signedTxHash === transactionHash)\n    } catch (e) {\n      this.events = []\n    }\n  }\n\n  @action\n  async setBlockFilter(blockNumber){\n    this.filteredBlockNumber = blockNumber\n    this.events = await this.getEvents()\n  }\n\n\n  @action\n  setFilter(value){\n    this.filter = value\n  }\n\n  addWaitingForConfirmation(hash) {\n    this.waitingForConfirmation.add(hash)\n    this.setBlockFilter(0)\n    this.homeStore.setBlockFilter(0)\n  }\n\n  getTxReceipt(hash) {\n    return this.foreignWeb3.eth.getTransactionReceipt(hash)\n  }\n\n  getDailyQuotaCompleted() {\n    return this.dailyLimit ? this.totalSpentPerDay / this.dailyLimit * 100 : 0\n  }\n\n  async waitUntilProcessed(txHash) {\n    const bridge = this.foreignBridge\n\n    const processed = await bridge.methods.relayedMessages(txHash).call()\n\n    if (processed) {\n      return Promise.resolve()\n    } else {\n      return sleep(5000).then(() => this.waitUntilProcessed(txHash))\n    }\n  }\n\n  getExplorerTxUrl(txHash) {\n    return this.explorerTxTemplate.replace('%s', txHash)\n  }\n\n  getExplorerAddressUrl(address) {\n    return this.explorerAddressTemplate.replace('%s', address)\n  }\n\n  @action\n  async getValidators(){\n    try {\n      const foreignValidatorsAddress = await this.foreignBridge.methods.validatorContract().call()\n      this.foreignBridgeValidators = new this.foreignWeb3.eth.Contract(BRIDGE_VALIDATORS_ABI, foreignValidatorsAddress);\n\n      this.requiredSignatures = await this.foreignBridgeValidators.methods.requiredSignatures().call()\n      this.validatorsCount = await this.foreignBridgeValidators.methods.validatorCount().call()\n\n      this.validators = await getValidatorList(foreignValidatorsAddress, this.foreignWeb3.eth)\n    } catch(e){\n      console.error(e)\n    }\n  }\n\n  async getFeeEvents() {\n    try {\n      const deployedAtBlock = await getDeployedAtBlock(this.foreignBridge);\n      const events = await getPastEvents(this.foreignBridge, deployedAtBlock, 'latest')\n\n      processLargeArrayAsync(\n        events,\n        this.processEvent,\n        () => {\n          this.feeEventsFinished = true\n        })\n    } catch(e){\n      console.error(e)\n      this.getFeeEvents()\n    }\n  }\n\n  processEvent = (event) => {\n    if (event.event === \"FeeDistributedFromSignatures\") {\n      this.feeManager.totalFeeDistributedFromSignatures = this.feeManager.totalFeeDistributedFromSignatures.plus(BN(fromDecimals(event.returnValues.feeAmount, this.tokenDecimals)))\n    } else if (event.event === \"FeeDistributedFromAffirmation\") {\n      this.feeManager.totalFeeDistributedFromAffirmation = this.feeManager.totalFeeDistributedFromAffirmation.plus(BN(fromDecimals(event.returnValues.feeAmount, this.tokenDecimals)))\n    }\n  }\n}\n\nexport default ForeignStore;\n"]},"metadata":{},"sourceType":"module"}