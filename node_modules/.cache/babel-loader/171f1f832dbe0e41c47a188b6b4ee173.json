{"ast":null,"code":"import _regeneratorRuntime from \"/home/usuario/Escritorio/csd-bridge-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/usuario/Escritorio/csd-bridge-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _initializerDefineProperty from \"/home/usuario/Escritorio/csd-bridge-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty\";\nimport _classCallCheck from \"/home/usuario/Escritorio/csd-bridge-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/usuario/Escritorio/csd-bridge-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _applyDecoratedDescriptor from \"/home/usuario/Escritorio/csd-bridge-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"/home/usuario/Escritorio/csd-bridge-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerWarningHelper\";\n\nvar _class, _descriptor, _temp;\n\nimport { action, observable } from \"mobx\";\nimport { estimateGas } from './utils/web3';\nimport { addPendingTransaction, removePendingTransaction } from './utils/testUtils';\nimport { getUnit } from './utils/bridgeMode';\nimport yn from '../components/utils/yn';\nvar TxStore = (_class = (_temp =\n/*#__PURE__*/\nfunction () {\n  function TxStore(rootStore) {\n    _classCallCheck(this, TxStore);\n\n    _initializerDefineProperty(this, \"txsValues\", _descriptor, this);\n\n    this.web3Store = rootStore.web3Store;\n    this.gasPriceStore = rootStore.gasPriceStore;\n    this.alertStore = rootStore.alertStore;\n    this.foreignStore = rootStore.foreignStore;\n    this.homeStore = rootStore.homeStore;\n    this.rootStore = rootStore;\n  }\n\n  _createClass(TxStore, [{\n    key: \"doSend\",\n    value: function () {\n      var _doSend = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(_ref) {\n        var _this = this;\n\n        var to, from, value, data, sentValue;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                to = _ref.to, from = _ref.from, value = _ref.value, data = _ref.data, sentValue = _ref.sentValue;\n                return _context2.abrupt(\"return\", this.web3Store.getWeb3Promise.then(\n                /*#__PURE__*/\n                _asyncToGenerator(\n                /*#__PURE__*/\n                _regeneratorRuntime.mark(function _callee() {\n                  var gasPrice, gas;\n                  return _regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          if (_this.web3Store.defaultAccount) {\n                            _context.next = 3;\n                            break;\n                          }\n\n                          _this.alertStore.pushError(\"Please unlock wallet\");\n\n                          return _context.abrupt(\"return\");\n\n                        case 3:\n                          _context.prev = 3;\n                          gasPrice = _this.gasPriceStore.gasPriceInHex;\n                          _context.next = 7;\n                          return estimateGas(_this.web3Store.injectedWeb3, to, gasPrice, from, value, data);\n\n                        case 7:\n                          gas = _context.sent;\n                          return _context.abrupt(\"return\", _this.web3Store.injectedWeb3.eth.sendTransaction({\n                            to: to,\n                            gasPrice: gasPrice,\n                            gas: gas,\n                            from: from,\n                            value: value,\n                            data: data,\n                            chainId: _this.web3Store.metamaskNet.id\n                          }).on('transactionHash', function (hash) {\n                            console.log('txHash', hash);\n                            _this.txsValues[hash] = sentValue;\n\n                            _this.alertStore.setLoadingStepIndex(1);\n\n                            addPendingTransaction();\n\n                            _this.getTxReceipt(hash);\n                          }).on('error', function (e) {\n                            if (!e.message.includes('not mined within 50 blocks') && !e.message.includes('Failed to subscribe to new newBlockHeaders')) {\n                              _this.alertStore.setLoading(false);\n\n                              _this.alertStore.pushError('Transaction rejected on wallet');\n                            }\n                          }));\n\n                        case 11:\n                          _context.prev = 11;\n                          _context.t0 = _context[\"catch\"](3);\n\n                          _this.alertStore.pushError(_context.t0.message);\n\n                        case 14:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee, null, [[3, 11]]);\n                }))));\n\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function doSend(_x) {\n        return _doSend.apply(this, arguments);\n      }\n\n      return doSend;\n    }()\n  }, {\n    key: \"erc677transferAndCall\",\n    value: function () {\n      var _erc677transferAndCall = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(_ref3) {\n        var _this2 = this;\n\n        var to, from, value, contract, tokenAddress;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                to = _ref3.to, from = _ref3.from, value = _ref3.value, contract = _ref3.contract, tokenAddress = _ref3.tokenAddress;\n                _context4.prev = 1;\n                return _context4.abrupt(\"return\", this.web3Store.getWeb3Promise.then(\n                /*#__PURE__*/\n                _asyncToGenerator(\n                /*#__PURE__*/\n                _regeneratorRuntime.mark(function _callee3() {\n                  var data;\n                  return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                    while (1) {\n                      switch (_context3.prev = _context3.next) {\n                        case 0:\n                          if (!_this2.web3Store.defaultAccount.address) {\n                            _context3.next = 7;\n                            break;\n                          }\n\n                          _context3.next = 3;\n                          return contract.methods.transferAndCall(to, value, '0x00').encodeABI();\n\n                        case 3:\n                          data = _context3.sent;\n                          return _context3.abrupt(\"return\", _this2.doSend({\n                            to: tokenAddress,\n                            from: from,\n                            value: '0x00',\n                            data: data,\n                            sentValue: value\n                          }));\n\n                        case 7:\n                          _this2.alertStore.pushError('Please unlock wallet');\n\n                        case 8:\n                        case \"end\":\n                          return _context3.stop();\n                      }\n                    }\n                  }, _callee3);\n                }))));\n\n              case 5:\n                _context4.prev = 5;\n                _context4.t0 = _context4[\"catch\"](1);\n                this.alertStore.pushError(_context4.t0);\n\n              case 8:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[1, 5]]);\n      }));\n\n      function erc677transferAndCall(_x2) {\n        return _erc677transferAndCall.apply(this, arguments);\n      }\n\n      return erc677transferAndCall;\n    }()\n  }, {\n    key: \"erc20transfer\",\n    value: function () {\n      var _erc20transfer = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee6(_ref5) {\n        var _this3 = this;\n\n        var to, from, value;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                to = _ref5.to, from = _ref5.from, value = _ref5.value;\n                _context6.prev = 1;\n                return _context6.abrupt(\"return\", this.web3Store.getWeb3Promise.then(\n                /*#__PURE__*/\n                _asyncToGenerator(\n                /*#__PURE__*/\n                _regeneratorRuntime.mark(function _callee5() {\n                  var data;\n                  return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n                    while (1) {\n                      switch (_context5.prev = _context5.next) {\n                        case 0:\n                          if (!_this3.web3Store.defaultAccount.address) {\n                            _context5.next = 7;\n                            break;\n                          }\n\n                          _context5.next = 3;\n                          return _this3.foreignStore.tokenContract.methods.transfer(to, value).encodeABI({\n                            from: _this3.web3Store.defaultAccount.address\n                          });\n\n                        case 3:\n                          data = _context5.sent;\n                          return _context5.abrupt(\"return\", _this3.doSend({\n                            to: _this3.foreignStore.tokenAddress,\n                            from: from,\n                            value: '0x',\n                            data: data,\n                            sentValue: value\n                          }));\n\n                        case 7:\n                          _this3.alertStore.pushError('Please unlock wallet');\n\n                        case 8:\n                        case \"end\":\n                          return _context5.stop();\n                      }\n                    }\n                  }, _callee5);\n                }))));\n\n              case 5:\n                _context6.prev = 5;\n                _context6.t0 = _context6[\"catch\"](1);\n                this.alertStore.pushError(_context6.t0);\n\n              case 8:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this, [[1, 5]]);\n      }));\n\n      function erc20transfer(_x3) {\n        return _erc20transfer.apply(this, arguments);\n      }\n\n      return erc20transfer;\n    }()\n  }, {\n    key: \"getTxReceipt\",\n    value: function () {\n      var _getTxReceipt = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee7(hash) {\n        var _this4 = this;\n\n        var web3;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                web3 = this.web3Store.injectedWeb3;\n                web3.eth.getTransaction(hash, function (error, res) {\n                  if (res && res.blockNumber) {\n                    _this4.getTxStatus(hash);\n                  } else {\n                    console.log('not mined yet', hash);\n                    setTimeout(function () {\n                      _this4.getTxReceipt(hash);\n                    }, 5000);\n                  }\n                });\n\n              case 2:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function getTxReceipt(_x4) {\n        return _getTxReceipt.apply(this, arguments);\n      }\n\n      return getTxReceipt;\n    }()\n  }, {\n    key: \"getTxStatus\",\n    value: function () {\n      var _getTxStatus = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee8(hash) {\n        var _this5 = this;\n\n        var web3;\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                web3 = this.web3Store.injectedWeb3;\n                web3.eth.getTransactionReceipt(hash, function (error, res) {\n                  if (res && res.blockNumber) {\n                    if (_this5.isStatusSuccess(res)) {\n                      if (_this5.web3Store.metamaskNet.id === _this5.web3Store.homeNet.id) {\n                        var blockConfirmations = _this5.homeStore.latestBlockNumber - res.blockNumber;\n\n                        if (blockConfirmations >= 8) {\n                          _this5.alertStore.setBlockConfirmations(8);\n\n                          _this5.alertStore.setLoadingStepIndex(2);\n\n                          if (yn(process.env.REACT_APP_FOREIGN_WITHOUT_EVENTS)) {\n                            _this5.foreignStore.waitUntilProcessed(hash).then(function () {\n                              _this5.alertStore.setLoadingStepIndex(3);\n\n                              var unitReceived = getUnit(_this5.rootStore.bridgeMode).unitForeign;\n                              setTimeout(function () {\n                                _this5.alertStore.pushSuccess(\"\".concat(unitReceived, \" received on \").concat(_this5.foreignStore.networkName), _this5.alertStore.FOREIGN_TRANSFER_SUCCESS);\n                              }, 2000);\n                              removePendingTransaction();\n                            });\n                          } else {\n                            _this5.foreignStore.addWaitingForConfirmation(hash);\n                          }\n                        } else {\n                          if (blockConfirmations > 0) {\n                            _this5.alertStore.setBlockConfirmations(blockConfirmations);\n                          }\n\n                          _this5.getTxStatus(hash);\n                        }\n                      } else {\n                        var _blockConfirmations = _this5.foreignStore.latestBlockNumber - res.blockNumber;\n\n                        if (_blockConfirmations >= 8) {\n                          _this5.alertStore.setBlockConfirmations(8);\n\n                          _this5.alertStore.setLoadingStepIndex(2);\n\n                          if (yn(process.env.REACT_APP_HOME_WITHOUT_EVENTS)) {\n                            _this5.homeStore.waitUntilProcessed(hash, _this5.txsValues[hash]).then(function () {\n                              _this5.alertStore.setLoadingStepIndex(3);\n\n                              var unitReceived = getUnit(_this5.rootStore.bridgeMode).unitHome;\n                              setTimeout(function () {\n                                _this5.alertStore.pushSuccess(\"\".concat(unitReceived, \" received on \").concat(_this5.homeStore.networkName), _this5.alertStore.HOME_TRANSFER_SUCCESS);\n                              }, 2000);\n                              removePendingTransaction();\n                            });\n                          } else {\n                            _this5.homeStore.addWaitingForConfirmation(hash);\n                          }\n                        } else {\n                          if (_blockConfirmations > 0) {\n                            _this5.alertStore.setBlockConfirmations(_blockConfirmations);\n                          }\n\n                          _this5.getTxStatus(hash);\n                        }\n                      }\n                    } else {\n                      _this5.alertStore.setLoading(false);\n\n                      _this5.alertStore.pushError(\"\".concat(hash, \" Mined but with errors. Perhaps out of gas\"));\n                    }\n                  } else {\n                    _this5.getTxStatus(hash);\n                  }\n                });\n\n              case 2:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function getTxStatus(_x5) {\n        return _getTxStatus.apply(this, arguments);\n      }\n\n      return getTxStatus;\n    }()\n  }, {\n    key: \"isStatusSuccess\",\n    value: function isStatusSuccess(tx) {\n      var toBN = this.web3Store.injectedWeb3.utils.toBN;\n      var statusSuccess = tx.status && (tx.status === true || toBN(tx.status).eq(toBN(1)));\n      var eventEmitted = tx.logs && tx.logs.length;\n      return statusSuccess || eventEmitted;\n    }\n  }]);\n\n  return TxStore;\n}(), _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"txsValues\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return {};\n  }\n}), _applyDecoratedDescriptor(_class.prototype, \"doSend\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"doSend\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"erc677transferAndCall\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"erc677transferAndCall\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"erc20transfer\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"erc20transfer\"), _class.prototype)), _class);\nexport default TxStore;","map":{"version":3,"sources":["/home/usuario/Escritorio/csd-bridge-ui/src/stores/TxStore.js"],"names":["action","observable","estimateGas","addPendingTransaction","removePendingTransaction","getUnit","yn","TxStore","rootStore","web3Store","gasPriceStore","alertStore","foreignStore","homeStore","to","from","value","data","sentValue","getWeb3Promise","then","defaultAccount","pushError","gasPrice","gasPriceInHex","injectedWeb3","gas","eth","sendTransaction","chainId","metamaskNet","id","on","hash","console","log","txsValues","setLoadingStepIndex","getTxReceipt","e","message","includes","setLoading","contract","tokenAddress","address","methods","transferAndCall","encodeABI","doSend","tokenContract","transfer","web3","getTransaction","error","res","blockNumber","getTxStatus","setTimeout","getTransactionReceipt","isStatusSuccess","homeNet","blockConfirmations","latestBlockNumber","setBlockConfirmations","process","env","REACT_APP_FOREIGN_WITHOUT_EVENTS","waitUntilProcessed","unitReceived","bridgeMode","unitForeign","pushSuccess","networkName","FOREIGN_TRANSFER_SUCCESS","addWaitingForConfirmation","REACT_APP_HOME_WITHOUT_EVENTS","unitHome","HOME_TRANSFER_SUCCESS","tx","toBN","utils","statusSuccess","status","eq","eventEmitted","logs","length"],"mappings":"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","sourcesContent":["import { action, observable } from \"mobx\";\nimport { estimateGas } from './utils/web3'\nimport { addPendingTransaction, removePendingTransaction } from './utils/testUtils'\nimport { getUnit } from './utils/bridgeMode'\nimport yn from '../components/utils/yn'\n\nclass TxStore {\n  @observable txsValues = {}\n\n  constructor(rootStore) {\n    this.web3Store = rootStore.web3Store\n    this.gasPriceStore = rootStore.gasPriceStore\n    this.alertStore = rootStore.alertStore\n    this.foreignStore = rootStore.foreignStore\n    this.homeStore = rootStore.homeStore\n    this.rootStore = rootStore\n  }\n\n  @action\n  async doSend({to, from, value, data, sentValue}){\n    return this.web3Store.getWeb3Promise.then(async ()=> {\n      if(!this.web3Store.defaultAccount){\n        this.alertStore.pushError(\"Please unlock wallet\")\n        return\n      }\n      try {\n        const gasPrice = this.gasPriceStore.gasPriceInHex\n        const gas = await estimateGas(this.web3Store.injectedWeb3, to, gasPrice, from, value, data)\n        return this.web3Store.injectedWeb3.eth.sendTransaction({\n          to,\n          gasPrice,\n          gas,\n          from,\n          value,\n          data,\n          chainId: this.web3Store.metamaskNet.id\n        }).on('transactionHash', (hash) => {\n          console.log('txHash', hash)\n          this.txsValues[hash] = sentValue\n          this.alertStore.setLoadingStepIndex(1)\n          addPendingTransaction()\n          this.getTxReceipt(hash)\n        }).on('error', (e) => {\n          if(!e.message.includes('not mined within 50 blocks') && !e.message.includes('Failed to subscribe to new newBlockHeaders')){\n            this.alertStore.setLoading(false)\n            this.alertStore.pushError('Transaction rejected on wallet');\n          }\n        })\n      } catch(e) {\n        this.alertStore.pushError(e.message);\n      }\n    })\n  }\n\n  @action\n  async erc677transferAndCall({to, from, value, contract, tokenAddress }){\n    try {\n      return this.web3Store.getWeb3Promise.then(async () => {\n        if(this.web3Store.defaultAccount.address){\n          const data = await contract.methods.transferAndCall(\n            to, value, '0x00'\n          ).encodeABI()\n          return this.doSend({to: tokenAddress, from, value: '0x00', data, sentValue: value})\n        } else {\n          this.alertStore.pushError('Please unlock wallet');\n        }\n      })\n    } catch(e) {\n      this.alertStore.pushError(e);\n    }\n  }\n\n  @action\n  async erc20transfer({to, from, value}){\n    try {\n      return this.web3Store.getWeb3Promise.then(async () => {\n        if(this.web3Store.defaultAccount.address){\n          const data = await this.foreignStore.tokenContract.methods.transfer(\n            to, value\n          ).encodeABI({ from: this.web3Store.defaultAccount.address })\n          return this.doSend({to: this.foreignStore.tokenAddress, from, value: '0x', data, sentValue: value})\n        } else {\n          this.alertStore.pushError('Please unlock wallet');\n        }\n      })\n    } catch(e) {\n      this.alertStore.pushError(e);\n    }\n  }\n\n  async getTxReceipt(hash){\n    const web3 = this.web3Store.injectedWeb3;\n    web3.eth.getTransaction(hash, (error, res) => {\n      if(res && res.blockNumber){\n        this.getTxStatus(hash)\n      } else {\n        console.log('not mined yet', hash)\n        setTimeout(() => {\n          this.getTxReceipt(hash)\n        }, 5000)\n      }\n    })\n  }\n\n  async getTxStatus(hash) {\n    const web3 = this.web3Store.injectedWeb3;\n    web3.eth.getTransactionReceipt(hash, (error, res) => {\n      if(res && res.blockNumber){\n        if(this.isStatusSuccess(res)){\n          if(this.web3Store.metamaskNet.id === this.web3Store.homeNet.id) {\n            const blockConfirmations = this.homeStore.latestBlockNumber - res.blockNumber\n            if(blockConfirmations >= 8) {\n              this.alertStore.setBlockConfirmations(8)\n              this.alertStore.setLoadingStepIndex(2)\n\n              if (yn(process.env.REACT_APP_FOREIGN_WITHOUT_EVENTS)) {\n                this.foreignStore.waitUntilProcessed(hash).then(() => {\n                  this.alertStore.setLoadingStepIndex(3)\n                  const unitReceived = getUnit(this.rootStore.bridgeMode).unitForeign\n                  setTimeout(() => {\n                      this.alertStore.pushSuccess(\n                        `${unitReceived} received on ${this.foreignStore.networkName}`,\n                        this.alertStore.FOREIGN_TRANSFER_SUCCESS\n                      )\n                    }\n                    , 2000)\n                  removePendingTransaction()\n                })\n              } else {\n                this.foreignStore.addWaitingForConfirmation(hash)\n              }\n            } else {\n              if(blockConfirmations > 0) {\n                this.alertStore.setBlockConfirmations(blockConfirmations)\n              }\n              this.getTxStatus(hash)\n            }\n\n          } else {\n            const blockConfirmations = this.foreignStore.latestBlockNumber - res.blockNumber\n            if(blockConfirmations >= 8) {\n              this.alertStore.setBlockConfirmations(8)\n              this.alertStore.setLoadingStepIndex(2)\n\n              if (yn(process.env.REACT_APP_HOME_WITHOUT_EVENTS)) {\n                this.homeStore.waitUntilProcessed(hash, this.txsValues[hash]).then(() => {\n                  this.alertStore.setLoadingStepIndex(3)\n                  const unitReceived = getUnit(this.rootStore.bridgeMode).unitHome\n                  setTimeout(() => {\n                      this.alertStore.pushSuccess(\n                        `${unitReceived} received on ${this.homeStore.networkName}`,\n                        this.alertStore.HOME_TRANSFER_SUCCESS\n                      )\n                    }\n                    , 2000)\n                  removePendingTransaction()\n                })\n              } else {\n                this.homeStore.addWaitingForConfirmation(hash)\n              }\n            } else {\n              if(blockConfirmations > 0) {\n                this.alertStore.setBlockConfirmations(blockConfirmations)\n              }\n              this.getTxStatus(hash)\n            }\n          }\n        } else {\n          this.alertStore.setLoading(false)\n          this.alertStore.pushError(`${hash} Mined but with errors. Perhaps out of gas`)\n        }\n      } else {\n        this.getTxStatus(hash)\n      }\n    })\n  }\n\n  isStatusSuccess(tx) {\n    const { toBN } = this.web3Store.injectedWeb3.utils\n    const statusSuccess =  tx.status && (tx.status === true || toBN(tx.status).eq(toBN(1)))\n    const eventEmitted = tx.logs && tx.logs.length\n    return statusSuccess || eventEmitted\n  }\n\n}\n\nexport default TxStore;\n"]},"metadata":{},"sourceType":"module"}