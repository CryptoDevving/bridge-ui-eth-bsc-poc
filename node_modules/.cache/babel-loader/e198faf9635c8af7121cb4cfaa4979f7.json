{"ast":null,"code":"var _jsxFileName = \"/home/usuario/Escritorio/csd-bridge-ui/src/components/NetworkDetails.js\";\nimport React from 'react';\nimport numeral from 'numeral';\nimport { CopyIcon } from './icons/CopyIcon';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\nexport var NetworkDetails = function NetworkDetails(_ref) {\n  var isHome = _ref.isHome,\n      networkData = _ref.networkData,\n      url = _ref.url,\n      logo = _ref.logo,\n      address = _ref.address,\n      currency = _ref.currency,\n      maxCurrentLimit = _ref.maxCurrentLimit,\n      maxPerTx = _ref.maxPerTx,\n      minPerTx = _ref.minPerTx,\n      tokenAddress = _ref.tokenAddress,\n      totalSupply = _ref.totalSupply,\n      totalBalance = _ref.totalBalance,\n      balance = _ref.balance,\n      displayTokenAddress = _ref.displayTokenAddress,\n      displayBridgeLimits = _ref.displayBridgeLimits,\n      nativeSupplyTitle = _ref.nativeSupplyTitle,\n      tokenName = _ref.tokenName,\n      getExplorerAddressUrl = _ref.getExplorerAddressUrl;\n  var networkTitle = isHome ? 'Bridge Home' : 'Bridge Foreign';\n  var logoClass = isHome ? 'home-logo home-logo-modal' : 'foreign-logo foreign-logo-modal';\n  var totalTitle = isHome ? nativeSupplyTitle ? \"Native Coins Amount\" : \"Totally minted by the bridge\" : \"\".concat(currency, \" Tokens Amount\");\n  var totalAmount = isHome ? totalBalance : totalSupply;\n  var formattedBalance = isNaN(numeral(balance).format('0.00', Math.floor)) ? numeral(0).format('0,0.00', Math.floor) : numeral(balance).format('0,0.000', Math.floor);\n  return React.createElement(\"div\", {\n    className: \"network-details\",\n    \"data-testid\": \"network-details\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"details-logo-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: logoClass,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"details-body\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    className: \"details-data-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: \"details-label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, \"Network\"), React.createElement(\"span\", {\n    className: \"details-description\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, url)), React.createElement(\"p\", {\n    className: \"details-data-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: \"details-label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, networkTitle, \" Address\"), React.createElement(\"span\", {\n    className: \"details-description details-copy\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, React.createElement(\"a\", {\n    className: \"details-description\",\n    href: getExplorerAddressUrl(address),\n    target: \"_blank\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, address.slice(0, 27).concat('...')), React.createElement(CopyToClipboard, {\n    text: address,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: \"copy-icon copy-icon-right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, React.createElement(CopyIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }))))), displayBridgeLimits && React.createElement(\"p\", {\n    className: \"details-data-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: \"details-label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, \"Remaining Daily \", currency, \" Quota\"), React.createElement(\"span\", {\n    className: \"details-description-black\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, numeral(maxCurrentLimit).format('0,0.0', Math.floor), \" \", currency)), displayBridgeLimits && React.createElement(\"p\", {\n    className: \"details-data-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: \"details-label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, \"Maximum Amount Per Transaction\"), React.createElement(\"span\", {\n    className: \"details-description-black\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, numeral(maxPerTx).format('0,0.0', Math.floor), \" \", currency)), displayBridgeLimits && React.createElement(\"p\", {\n    className: \"details-data-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: \"details-label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, \"Minimum Amount Per Transaction\"), React.createElement(\"span\", {\n    className: \"details-description-black\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, numeral(minPerTx).format('0,0.000', Math.floor), \" \", currency)), displayTokenAddress && React.createElement(\"p\", {\n    className: \"details-data-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: \"details-label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, \"Token Address\"), React.createElement(\"span\", {\n    className: \"details-description details-copy\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, React.createElement(\"a\", {\n    className: \"details-description\",\n    href: getExplorerAddressUrl(tokenAddress),\n    target: \"_blank\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, tokenAddress.slice(0, 27).concat('...')), React.createElement(CopyToClipboard, {\n    text: tokenAddress,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: \"copy-icon copy-icon-right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, React.createElement(CopyIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }))))), displayTokenAddress && React.createElement(\"p\", {\n    className: \"details-data-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: \"details-label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, \"Token Name\"), React.createElement(\"span\", {\n    className: \"details-description-black\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, tokenName || 'No token name')), React.createElement(\"p\", {\n    className: \"details-data-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: \"details-label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, totalTitle), React.createElement(\"span\", {\n    className: \"details-description-black\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, numeral(totalAmount).format('0,0.000', Math.floor), \" \", currency)), React.createElement(\"p\", {\n    className: \"details-data-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: \"details-label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, \"Your \", currency, \" Balance\"), React.createElement(\"span\", {\n    className: \"details-description-black\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, formattedBalance, \" \", currency))));\n};","map":{"version":3,"sources":["/home/usuario/Escritorio/csd-bridge-ui/src/components/NetworkDetails.js"],"names":["React","numeral","CopyIcon","CopyToClipboard","NetworkDetails","isHome","networkData","url","logo","address","currency","maxCurrentLimit","maxPerTx","minPerTx","tokenAddress","totalSupply","totalBalance","balance","displayTokenAddress","displayBridgeLimits","nativeSupplyTitle","tokenName","getExplorerAddressUrl","networkTitle","logoClass","totalTitle","totalAmount","formattedBalance","isNaN","format","Math","floor","slice","concat"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,SAApB;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,SAASC,eAAT,QAAgC,yBAAhC;AAEA,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,OAmBvB;AAAA,MAlBLC,MAkBK,QAlBLA,MAkBK;AAAA,MAjBLC,WAiBK,QAjBLA,WAiBK;AAAA,MAhBLC,GAgBK,QAhBLA,GAgBK;AAAA,MAfLC,IAeK,QAfLA,IAeK;AAAA,MAdLC,OAcK,QAdLA,OAcK;AAAA,MAbLC,QAaK,QAbLA,QAaK;AAAA,MAZLC,eAYK,QAZLA,eAYK;AAAA,MAXLC,QAWK,QAXLA,QAWK;AAAA,MAVLC,QAUK,QAVLA,QAUK;AAAA,MATLC,YASK,QATLA,YASK;AAAA,MARLC,WAQK,QARLA,WAQK;AAAA,MAPLC,YAOK,QAPLA,YAOK;AAAA,MANLC,OAMK,QANLA,OAMK;AAAA,MALLC,mBAKK,QALLA,mBAKK;AAAA,MAJLC,mBAIK,QAJLA,mBAIK;AAAA,MAHLC,iBAGK,QAHLA,iBAGK;AAAA,MAFLC,SAEK,QAFLA,SAEK;AAAA,MADLC,qBACK,QADLA,qBACK;AACL,MAAMC,YAAY,GAAGlB,MAAM,GAAG,aAAH,GAAmB,gBAA9C;AACA,MAAMmB,SAAS,GAAGnB,MAAM,GAAG,2BAAH,GAAiC,iCAAzD;AACA,MAAMoB,UAAU,GAAGpB,MAAM,GACrBe,iBAAiB,yDADI,aAElBV,QAFkB,mBAAzB;AAGA,MAAMgB,WAAW,GAAGrB,MAAM,GAAGW,YAAH,GAAkBD,WAA5C;AACA,MAAMY,gBAAgB,GAAGC,KAAK,CAAC3B,OAAO,CAACgB,OAAD,CAAP,CAAiBY,MAAjB,CAAwB,MAAxB,EAAgCC,IAAI,CAACC,KAArC,CAAD,CAAL,GACrB9B,OAAO,CAAC,CAAD,CAAP,CAAW4B,MAAX,CAAkB,QAAlB,EAA4BC,IAAI,CAACC,KAAjC,CADqB,GAErB9B,OAAO,CAACgB,OAAD,CAAP,CAAiBY,MAAjB,CAAwB,SAAxB,EAAmCC,IAAI,CAACC,KAAxC,CAFJ;AAIA,SACE;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAiC,mBAAY,iBAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,SAAS,EAAC,wBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAEP,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADJ,EAIE;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAG,IAAA,SAAS,EAAC,wBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAM,IAAA,SAAS,EAAC,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,EAEE;AAAM,IAAA,SAAS,EAAC,qBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAuCjB,GAAvC,CAFF,CADF,EAKE;AAAG,IAAA,SAAS,EAAC,wBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAM,IAAA,SAAS,EAAC,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAiCgB,YAAjC,aADF,EAEI;AAAM,IAAA,SAAS,EAAC,kCAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAG,IAAA,SAAS,EAAC,qBAAb;AAAmC,IAAA,IAAI,EAAED,qBAAqB,CAACb,OAAD,CAA9D;AAAyE,IAAA,MAAM,EAAC,QAAhF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,OAAO,CAACuB,KAAR,CAAc,CAAd,EAAgB,EAAhB,EAAoBC,MAApB,CAA2B,KAA3B,CADH,CADF,EAIE,oBAAC,eAAD;AAAiB,IAAA,IAAI,EAAExB,OAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAM,IAAA,SAAS,EAAC,2BAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA4C,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAA5C,CADF,CAJF,CAFJ,CALF,EAgBGU,mBAAmB,IAAI;AAAG,IAAA,SAAS,EAAC,wBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACtB;AAAM,IAAA,SAAS,EAAC,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAiDT,QAAjD,WADsB,EAEtB;AAAM,IAAA,SAAS,EAAC,2BAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA6CT,OAAO,CAACU,eAAD,CAAP,CAAyBkB,MAAzB,CAAgC,OAAhC,EAAyCC,IAAI,CAACC,KAA9C,CAA7C,OAAoGrB,QAApG,CAFsB,CAhB1B,EAoBGS,mBAAmB,IAAI;AAAG,IAAA,SAAS,EAAC,wBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACtB;AAAM,IAAA,SAAS,EAAC,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCADsB,EAEtB;AAAM,IAAA,SAAS,EAAC,2BAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA6ClB,OAAO,CAACW,QAAD,CAAP,CAAkBiB,MAAlB,CAAyB,OAAzB,EAAkCC,IAAI,CAACC,KAAvC,CAA7C,OAA6FrB,QAA7F,CAFsB,CApB1B,EAwBGS,mBAAmB,IAAI;AAAG,IAAA,SAAS,EAAC,wBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACtB;AAAM,IAAA,SAAS,EAAC,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCADsB,EAEtB;AAAM,IAAA,SAAS,EAAC,2BAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA6ClB,OAAO,CAACY,QAAD,CAAP,CAAkBgB,MAAlB,CAAyB,SAAzB,EAAoCC,IAAI,CAACC,KAAzC,CAA7C,OAA+FrB,QAA/F,CAFsB,CAxB1B,EA4BGQ,mBAAmB,IAClB;AAAG,IAAA,SAAS,EAAC,wBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAM,IAAA,SAAS,EAAC,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,EAEE;AAAM,IAAA,SAAS,EAAC,kCAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAG,IAAA,SAAS,EAAC,qBAAb;AAAmC,IAAA,IAAI,EAAEI,qBAAqB,CAACR,YAAD,CAA9D;AAA8E,IAAA,MAAM,EAAC,QAArF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,YAAY,CAACkB,KAAb,CAAmB,CAAnB,EAAqB,EAArB,EAAyBC,MAAzB,CAAgC,KAAhC,CADH,CADF,EAIE,oBAAC,eAAD;AAAiB,IAAA,IAAI,EAAEnB,YAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAM,IAAA,SAAS,EAAC,2BAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA4C,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAA5C,CADF,CAJF,CAFF,CA7BJ,EAyCGI,mBAAmB,IAClB;AAAG,IAAA,SAAS,EAAC,wBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAM,IAAA,SAAS,EAAC,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,EAEE;AAAM,IAAA,SAAS,EAAC,2BAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA6CG,SAAS,IAAI,eAA1D,CAFF,CA1CJ,EA+CE;AAAG,IAAA,SAAS,EAAC,wBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAM,IAAA,SAAS,EAAC,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAiCI,UAAjC,CADF,EAEE;AAAM,IAAA,SAAS,EAAC,2BAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA6CxB,OAAO,CAACyB,WAAD,CAAP,CAAqBG,MAArB,CAA4B,SAA5B,EAAuCC,IAAI,CAACC,KAA5C,CAA7C,OAAkGrB,QAAlG,CAFF,CA/CF,EAmDE;AAAG,IAAA,SAAS,EAAC,wBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAM,IAAA,SAAS,EAAC,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAsCA,QAAtC,aADF,EAEE;AAAM,IAAA,SAAS,EAAC,2BAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA6CiB,gBAA7C,OAAgEjB,QAAhE,CAFF,CAnDF,CAJF,CADF;AA+DD,CA7FM","sourcesContent":["import React from 'react'\nimport numeral from 'numeral'\nimport { CopyIcon } from './icons/CopyIcon'\nimport { CopyToClipboard } from 'react-copy-to-clipboard'\n\nexport const NetworkDetails = ({\n  isHome,\n  networkData,\n  url,\n  logo,\n  address,\n  currency,\n  maxCurrentLimit,\n  maxPerTx,\n  minPerTx,\n  tokenAddress,\n  totalSupply,\n  totalBalance,\n  balance,\n  displayTokenAddress,\n  displayBridgeLimits,\n  nativeSupplyTitle,\n  tokenName,\n  getExplorerAddressUrl\n }) => {\n  const networkTitle = isHome ? 'Bridge Home' : 'Bridge Foreign'\n  const logoClass = isHome ? 'home-logo home-logo-modal' : 'foreign-logo foreign-logo-modal'\n  const totalTitle = isHome\n    ? nativeSupplyTitle ? `Native Coins Amount` : `Totally minted by the bridge`\n    : `${currency} Tokens Amount`\n  const totalAmount = isHome ? totalBalance : totalSupply\n  const formattedBalance = isNaN(numeral(balance).format('0.00', Math.floor))\n    ? numeral(0).format('0,0.00', Math.floor)\n    : numeral(balance).format('0,0.000', Math.floor)\n\n  return (\n    <div className=\"network-details\" data-testid=\"network-details\">\n        <div className=\"details-logo-container\">\n          <div className={logoClass} />\n      </div>\n      <div className=\"details-body\">\n        <p className=\"details-data-container\">\n          <span className=\"details-label\">Network</span>\n          <span className=\"details-description\">{url}</span>\n        </p>\n        <p className=\"details-data-container\">\n          <span className=\"details-label\">{networkTitle} Address</span>\n            <span className=\"details-description details-copy\">\n              <a className=\"details-description\" href={getExplorerAddressUrl(address)} target=\"_blank\" >\n                {address.slice(0,27).concat('...')}\n              </a>\n              <CopyToClipboard text={address}>\n                <span className=\"copy-icon copy-icon-right\"><CopyIcon /></span>\n              </CopyToClipboard>\n            </span>\n        </p>\n        {displayBridgeLimits && <p className=\"details-data-container\">\n          <span className=\"details-label\">Remaining Daily {currency} Quota</span>\n          <span className=\"details-description-black\">{numeral(maxCurrentLimit).format('0,0.0', Math.floor)} {currency}</span>\n        </p>}\n        {displayBridgeLimits && <p className=\"details-data-container\">\n          <span className=\"details-label\">Maximum Amount Per Transaction</span>\n          <span className=\"details-description-black\">{numeral(maxPerTx).format('0,0.0', Math.floor)} {currency}</span>\n        </p>}\n        {displayBridgeLimits && <p className=\"details-data-container\">\n          <span className=\"details-label\">Minimum Amount Per Transaction</span>\n          <span className=\"details-description-black\">{numeral(minPerTx).format('0,0.000', Math.floor)} {currency}</span>\n        </p>}\n        {displayTokenAddress && (\n          <p className=\"details-data-container\">\n            <span className=\"details-label\">Token Address</span>\n            <span className=\"details-description details-copy\">\n              <a className=\"details-description\" href={getExplorerAddressUrl(tokenAddress)} target=\"_blank\" >\n                {tokenAddress.slice(0,27).concat('...')}\n              </a>\n              <CopyToClipboard text={tokenAddress}>\n                <span className=\"copy-icon copy-icon-right\"><CopyIcon /></span>\n              </CopyToClipboard>\n            </span>\n          </p>\n        )}\n        {displayTokenAddress && (\n          <p className=\"details-data-container\">\n            <span className=\"details-label\">Token Name</span>\n            <span className=\"details-description-black\">{tokenName || 'No token name'}</span>\n          </p>\n        )}\n        <p className=\"details-data-container\">\n          <span className=\"details-label\">{totalTitle}</span>\n          <span className=\"details-description-black\">{numeral(totalAmount).format('0,0.000', Math.floor)} {currency}</span>\n        </p>\n        <p className=\"details-data-container\">\n          <span className=\"details-label\">Your {currency} Balance</span>\n          <span className=\"details-description-black\">{formattedBalance} {currency}</span>\n        </p>\n      </div>\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}