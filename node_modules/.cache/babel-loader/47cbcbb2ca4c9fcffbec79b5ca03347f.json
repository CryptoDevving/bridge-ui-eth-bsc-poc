{"ast":null,"code":"import _regeneratorRuntime from \"/home/usuario/Escritorio/csd-bridge-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/usuario/Escritorio/csd-bridge-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _require = require('web3-utils'),\n    toWei = _require.toWei;\n\nexport function fetchGasPrice(_x) {\n  return _fetchGasPrice.apply(this, arguments);\n}\n\nfunction _fetchGasPrice() {\n  _fetchGasPrice = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(_ref) {\n    var oracleFn, gasPrice;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            oracleFn = _ref.oracleFn;\n            gasPrice = null;\n            _context.prev = 2;\n            _context.next = 5;\n            return oracleFn();\n\n          case 5:\n            gasPrice = _context.sent;\n            _context.next = 11;\n            break;\n\n          case 8:\n            _context.prev = 8;\n            _context.t0 = _context[\"catch\"](2);\n\n            if (!_context.t0.message.includes('Gas Price Oracle url not defined')) {\n              console.error(\"Gas Price API is not available. \".concat(_context.t0.message));\n            }\n\n          case 11:\n            return _context.abrupt(\"return\", gasPrice);\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[2, 8]]);\n  }));\n  return _fetchGasPrice.apply(this, arguments);\n}\n\nexport function fetchGasPriceFromOracle(_x2, _x3) {\n  return _fetchGasPriceFromOracle.apply(this, arguments);\n}\n\nfunction _fetchGasPriceFromOracle() {\n  _fetchGasPriceFromOracle = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(oracleUrl, speedType) {\n    var response, json, gasPrice;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (oracleUrl) {\n              _context2.next = 2;\n              break;\n            }\n\n            throw new Error(\"Gas Price Oracle url not defined\");\n\n          case 2:\n            _context2.next = 4;\n            return fetch(oracleUrl);\n\n          case 4:\n            response = _context2.sent;\n            _context2.next = 7;\n            return response.json();\n\n          case 7:\n            json = _context2.sent;\n            gasPrice = json[speedType];\n\n            if (gasPrice) {\n              _context2.next = 11;\n              break;\n            }\n\n            throw new Error(\"Response from Oracle didn't include gas price for \".concat(speedType, \" type.\"));\n\n          case 11:\n            return _context2.abrupt(\"return\", toWei(gasPrice.toString(), 'gwei'));\n\n          case 12:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _fetchGasPriceFromOracle.apply(this, arguments);\n}","map":{"version":3,"sources":["/home/usuario/Escritorio/csd-bridge-ui/src/stores/utils/gas.js"],"names":["require","toWei","fetchGasPrice","oracleFn","gasPrice","message","includes","console","error","fetchGasPriceFromOracle","oracleUrl","speedType","Error","fetch","response","json","toString"],"mappings":";;;eAAkBA,OAAO,CAAC,YAAD,C;IAAjBC,K,YAAAA,K;;AAER,gBAAsBC,aAAtB;AAAA;AAAA;;;;;2BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAA+BC,YAAAA,QAA/B,QAA+BA,QAA/B;AACDC,YAAAA,QADC,GACU,IADV;AAAA;AAAA;AAAA,mBAGcD,QAAQ,EAHtB;;AAAA;AAGHC,YAAAA,QAHG;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAKH,gBAAI,CAAC,YAAEC,OAAF,CAAUC,QAAV,CAAmB,kCAAnB,CAAL,EAA6D;AAC3DC,cAAAA,OAAO,CAACC,KAAR,2CAAiD,YAAEH,OAAnD;AACD;;AAPE;AAAA,6CASED,QATF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAYP,gBAAsBK,uBAAtB;AAAA;AAAA;;;;;2BAAO,kBAAuCC,SAAvC,EAAkDC,SAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACDD,SADC;AAAA;AAAA;AAAA;;AAAA,kBAEG,IAAIE,KAAJ,oCAFH;;AAAA;AAAA;AAAA,mBAIkBC,KAAK,CAACH,SAAD,CAJvB;;AAAA;AAICI,YAAAA,QAJD;AAAA;AAAA,mBAKcA,QAAQ,CAACC,IAAT,EALd;;AAAA;AAKCA,YAAAA,IALD;AAMCX,YAAAA,QAND,GAMYW,IAAI,CAACJ,SAAD,CANhB;;AAAA,gBAOAP,QAPA;AAAA;AAAA;AAAA;;AAAA,kBAQG,IAAIQ,KAAJ,6DAA+DD,SAA/D,YARH;;AAAA;AAAA,8CAUEV,KAAK,CAACG,QAAQ,CAACY,QAAT,EAAD,EAAsB,MAAtB,CAVP;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["const { toWei } = require('web3-utils')\n\nexport async function fetchGasPrice({ oracleFn }) {\n  let gasPrice = null\n  try {\n    gasPrice = await oracleFn()\n  } catch (e) {\n    if (!e.message.includes('Gas Price Oracle url not defined')) {\n      console.error(`Gas Price API is not available. ${e.message}`)\n    }\n  }\n  return gasPrice\n}\n\nexport async function fetchGasPriceFromOracle(oracleUrl, speedType) {\n  if(!oracleUrl) {\n    throw new Error(`Gas Price Oracle url not defined`)\n  }\n  const response = await fetch(oracleUrl)\n  const json = await response.json()\n  const gasPrice = json[speedType]\n  if (!gasPrice) {\n    throw new Error(`Response from Oracle didn't include gas price for ${speedType} type.`)\n  }\n  return toWei(gasPrice.toString(), 'gwei')\n}\n"]},"metadata":{},"sourceType":"module"}