{"ast":null,"code":"import _regeneratorRuntime from \"/home/usuario/Escritorio/csd-bridge-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/usuario/Escritorio/csd-bridge-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _initializerDefineProperty from \"/home/usuario/Escritorio/csd-bridge-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty\";\nimport _classCallCheck from \"/home/usuario/Escritorio/csd-bridge-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/usuario/Escritorio/csd-bridge-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _applyDecoratedDescriptor from \"/home/usuario/Escritorio/csd-bridge-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"/home/usuario/Escritorio/csd-bridge-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerWarningHelper\";\n\nvar _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _temp;\n\nimport { action, observable } from \"mobx\";\nimport getWeb3, { getBalance, getWeb3Instance, getNetwork } from './utils/web3';\nimport { balanceLoaded } from './utils/testUtils';\nimport { BRIDGE_MODES } from './utils/bridgeMode';\nvar Web3Store = (_class = (_temp =\n/*#__PURE__*/\nfunction () {\n  function Web3Store(rootStore) {\n    var _this = this;\n\n    _classCallCheck(this, Web3Store);\n\n    _initializerDefineProperty(this, \"injectedWeb3\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"defaultAccount\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"homeWeb3\", _descriptor3, this);\n\n    _initializerDefineProperty(this, \"foreignWeb3\", _descriptor4, this);\n\n    _initializerDefineProperty(this, \"loading\", _descriptor5, this);\n\n    _initializerDefineProperty(this, \"errors\", _descriptor6, this);\n\n    _initializerDefineProperty(this, \"getWeb3Promise\", _descriptor7, this);\n\n    _initializerDefineProperty(this, \"setHomeWeb3Promise\", _descriptor8, this);\n\n    _initializerDefineProperty(this, \"metamaskNotSetted\", _descriptor9, this);\n\n    _initializerDefineProperty(this, \"homeNet\", _descriptor10, this);\n\n    _initializerDefineProperty(this, \"foreignNet\", _descriptor11, this);\n\n    _initializerDefineProperty(this, \"metamaskNet\", _descriptor12, this);\n\n    _initializerDefineProperty(this, \"walletInstalled\", _descriptor13, this);\n\n    this.HOME_HTTP_PARITY_URL = process.env.REACT_APP_HOME_HTTP_PARITY_URL;\n    this.FOREIGN_HTTP_PARITY_URL = process.env.REACT_APP_FOREIGN_HTTP_PARITY_URL;\n    this.alertStore = rootStore.alertStore;\n    this.rootStore = rootStore;\n    this.getWeb3Promise = getWeb3();\n    this.getWeb3Promise.then(function (web3Config) {\n      _this.setWeb3State(web3Config);\n\n      _this.getBalances(false);\n\n      setInterval(function () {\n        _this.getBalances(true);\n      }, 3000);\n    }).catch(function (e) {\n      var error = {\n        rejected: function rejected() {\n          return _this.alertStore.pushError(e.message);\n        },\n        unlock: function unlock() {\n          return _this.alertStore.pushError(e.message);\n        },\n        install: function install() {\n          return _this.walletInstalled = false;\n        }\n      }[e.type];\n      console.error(e.message, 'web3 not loaded');\n\n      _this.errors.push(e.message);\n\n      _this.metamaskNotSetted = true;\n      error();\n    });\n    this.setWeb3Home();\n    this.setWeb3Foreign();\n    this.checkMetamaskConfig();\n  }\n\n  _createClass(Web3Store, [{\n    key: \"setWeb3State\",\n    value: function setWeb3State(web3Config) {\n      var web3Instance = web3Config.web3Instance,\n          defaultAccount = web3Config.defaultAccount,\n          netIdName = web3Config.netIdName,\n          netId = web3Config.netId;\n      this.metamaskNet = {\n        id: netId,\n        name: netIdName\n      };\n      this.defaultAccount.address = defaultAccount;\n      this.injectedWeb3 = web3Instance;\n      this.loading = false;\n    }\n  }, {\n    key: \"setWeb3Home\",\n    value: function () {\n      var _setWeb3Home = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var _this2 = this;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.homeWeb3 = getWeb3Instance(this.HOME_HTTP_PARITY_URL);\n                this.setHomeWeb3Promise = getNetwork(this.homeWeb3).then(function (homeNet) {\n                  _this2.homeNet = homeNet;\n                });\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function setWeb3Home() {\n        return _setWeb3Home.apply(this, arguments);\n      }\n\n      return setWeb3Home;\n    }()\n  }, {\n    key: \"setWeb3Foreign\",\n    value: function () {\n      var _setWeb3Foreign = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                this.foreignWeb3 = getWeb3Instance(this.FOREIGN_HTTP_PARITY_URL);\n                _context2.next = 3;\n                return getNetwork(this.foreignWeb3);\n\n              case 3:\n                this.foreignNet = _context2.sent;\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function setWeb3Foreign() {\n        return _setWeb3Foreign.apply(this, arguments);\n      }\n\n      return setWeb3Foreign;\n    }()\n  }, {\n    key: \"getBalances\",\n    value: function () {\n      var _getBalances = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(displayLoading) {\n        var accounts, Loading, accountUpdated;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.prev = 0;\n                _context3.next = 3;\n                return this.injectedWeb3.eth.getAccounts();\n\n              case 3:\n                accounts = _context3.sent;\n                Loading = this.alertStore.showLoading;\n                accountUpdated = false;\n\n                if (accounts[0] !== this.defaultAccount.address) {\n                  if (displayLoading && !Loading && accounts[0] !== undefined) {\n                    this.alertStore.setLoading(true);\n                    accountUpdated = true;\n                  }\n\n                  this.defaultAccount.address = accounts[0];\n                }\n\n                _context3.next = 9;\n                return getBalance(this.homeWeb3, this.defaultAccount.address);\n\n              case 9:\n                this.defaultAccount.homeBalance = _context3.sent;\n\n                if (!accountUpdated) {\n                  _context3.next = 16;\n                  break;\n                }\n\n                _context3.next = 13;\n                return this.rootStore.foreignStore.getTokenBalance();\n\n              case 13:\n                _context3.next = 15;\n                return this.rootStore.homeStore.getBalance();\n\n              case 15:\n                this.alertStore.setLoading(false);\n\n              case 16:\n                if (this.rootStore.bridgeModeInitialized && this.rootStore.bridgeMode !== BRIDGE_MODES.ERC_TO_ERC) {\n                  balanceLoaded();\n                }\n\n                _context3.next = 22;\n                break;\n\n              case 19:\n                _context3.prev = 19;\n                _context3.t0 = _context3[\"catch\"](0);\n                console.error(_context3.t0);\n\n              case 22:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[0, 19]]);\n      }));\n\n      function getBalances(_x) {\n        return _getBalances.apply(this, arguments);\n      }\n\n      return getBalances;\n    }()\n  }, {\n    key: \"checkMetamaskConfig\",\n    value: function checkMetamaskConfig() {\n      var _this3 = this;\n\n      if (!this.metamaskNotSetted) {\n        if (this.metamaskNet.name === '' || this.homeNet.name === '' || this.foreignNet.name === '') {\n          setTimeout(function () {\n            _this3.checkMetamaskConfig();\n          }, 1000);\n          return;\n        }\n\n        if (this.metamaskNet.name !== this.homeNet.name && this.metamaskNet.name !== this.foreignNet.name) {\n          this.metamaskNotSetted = true;\n          this.alertStore.pushError(\"You are on an unknown network on your wallet. Please select \".concat(this.homeNet.name, \" or \").concat(this.foreignNet.name, \" in order to communicate with the bridge.\"));\n        }\n      }\n    }\n  }, {\n    key: \"onHomeSide\",\n    value: function () {\n      var _onHomeSide = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4() {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this.getWeb3Promise;\n\n              case 2:\n                _context4.next = 4;\n                return this.setHomeWeb3Promise;\n\n              case 4:\n                return _context4.abrupt(\"return\", this.metamaskNet.id === this.homeNet.id);\n\n              case 5:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function onHomeSide() {\n        return _onHomeSide.apply(this, arguments);\n      }\n\n      return onHomeSide;\n    }()\n  }]);\n\n  return Web3Store;\n}(), _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"injectedWeb3\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return {};\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"defaultAccount\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return {\n      address: '',\n      homeBalance: ''\n    };\n  }\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"homeWeb3\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return {};\n  }\n}), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, \"foreignWeb3\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return {};\n  }\n}), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, \"loading\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return true;\n  }\n}), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, \"errors\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return [];\n  }\n}), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, \"getWeb3Promise\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return null;\n  }\n}), _descriptor8 = _applyDecoratedDescriptor(_class.prototype, \"setHomeWeb3Promise\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return null;\n  }\n}), _descriptor9 = _applyDecoratedDescriptor(_class.prototype, \"metamaskNotSetted\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return false;\n  }\n}), _descriptor10 = _applyDecoratedDescriptor(_class.prototype, \"homeNet\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return {\n      id: '',\n      name: ''\n    };\n  }\n}), _descriptor11 = _applyDecoratedDescriptor(_class.prototype, \"foreignNet\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return {\n      id: '',\n      name: ''\n    };\n  }\n}), _descriptor12 = _applyDecoratedDescriptor(_class.prototype, \"metamaskNet\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return {\n      id: '',\n      name: ''\n    };\n  }\n}), _descriptor13 = _applyDecoratedDescriptor(_class.prototype, \"walletInstalled\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return true;\n  }\n}), _applyDecoratedDescriptor(_class.prototype, \"setWeb3State\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"setWeb3State\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"setWeb3Home\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"setWeb3Home\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"setWeb3Foreign\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"setWeb3Foreign\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"getBalances\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"getBalances\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"checkMetamaskConfig\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"checkMetamaskConfig\"), _class.prototype)), _class);\nexport default Web3Store;","map":{"version":3,"sources":["/home/usuario/Escritorio/csd-bridge-ui/src/stores/Web3Store.js"],"names":["action","observable","getWeb3","getBalance","getWeb3Instance","getNetwork","balanceLoaded","BRIDGE_MODES","Web3Store","rootStore","HOME_HTTP_PARITY_URL","process","env","REACT_APP_HOME_HTTP_PARITY_URL","FOREIGN_HTTP_PARITY_URL","REACT_APP_FOREIGN_HTTP_PARITY_URL","alertStore","getWeb3Promise","then","web3Config","setWeb3State","getBalances","setInterval","catch","e","error","rejected","pushError","message","unlock","install","walletInstalled","type","console","errors","push","metamaskNotSetted","setWeb3Home","setWeb3Foreign","checkMetamaskConfig","web3Instance","defaultAccount","netIdName","netId","metamaskNet","id","name","address","injectedWeb3","loading","homeWeb3","setHomeWeb3Promise","homeNet","foreignWeb3","foreignNet","displayLoading","eth","getAccounts","accounts","Loading","showLoading","accountUpdated","undefined","setLoading","homeBalance","foreignStore","getTokenBalance","homeStore","bridgeModeInitialized","bridgeMode","ERC_TO_ERC","setTimeout"],"mappings":";;;;;;;;;;AAAA,SAASA,MAAT,EAAiBC,UAAjB,QAAmC,MAAnC;AACA,OAAOC,OAAP,IAAkBC,UAAlB,EAA8BC,eAA9B,EAA+CC,UAA/C,QAAiE,cAAjE;AACA,SAASC,aAAT,QAA8B,mBAA9B;AACA,SAASC,YAAT,QAA6B,oBAA7B;IAEMC,S;;;AAuBJ,qBAAYC,SAAZ,EAAuB;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA,SAHvBC,oBAGuB,GAHAC,OAAO,CAACC,GAAR,CAAYC,8BAGZ;AAAA,SAFvBC,uBAEuB,GAFGH,OAAO,CAACC,GAAR,CAAYG,iCAEf;AACrB,SAAKC,UAAL,GAAkBP,SAAS,CAACO,UAA5B;AACA,SAAKP,SAAL,GAAiBA,SAAjB;AAEA,SAAKQ,cAAL,GAAsBf,OAAO,EAA7B;AAEA,SAAKe,cAAL,CAAoBC,IAApB,CAAyB,UAACC,UAAD,EAAgB;AACvC,MAAA,KAAI,CAACC,YAAL,CAAkBD,UAAlB;;AACA,MAAA,KAAI,CAACE,WAAL,CAAiB,KAAjB;;AACAC,MAAAA,WAAW,CAAC,YAAM;AAChB,QAAA,KAAI,CAACD,WAAL,CAAiB,IAAjB;AACD,OAFU,EAER,IAFQ,CAAX;AAGD,KAND,EAMGE,KANH,CAMS,UAAAC,CAAC,EAAI;AACZ,UAAMC,KAAK,GAAG;AACZC,QAAAA,QAAQ,EAAE;AAAA,iBAAM,KAAI,CAACV,UAAL,CAAgBW,SAAhB,CAA0BH,CAAC,CAACI,OAA5B,CAAN;AAAA,SADE;AAEZC,QAAAA,MAAM,EAAE;AAAA,iBAAM,KAAI,CAACb,UAAL,CAAgBW,SAAhB,CAA0BH,CAAC,CAACI,OAA5B,CAAN;AAAA,SAFI;AAGZE,QAAAA,OAAO,EAAE;AAAA,iBAAM,KAAI,CAACC,eAAL,GAAuB,KAA7B;AAAA;AAHG,QAIZP,CAAC,CAACQ,IAJU,CAAd;AAMAC,MAAAA,OAAO,CAACR,KAAR,CAAcD,CAAC,CAACI,OAAhB,EAAyB,iBAAzB;;AACA,MAAA,KAAI,CAACM,MAAL,CAAYC,IAAZ,CAAiBX,CAAC,CAACI,OAAnB;;AACA,MAAA,KAAI,CAACQ,iBAAL,GAAyB,IAAzB;AACAX,MAAAA,KAAK;AACN,KAjBD;AAkBA,SAAKY,WAAL;AACA,SAAKC,cAAL;AACA,SAAKC,mBAAL;AACD;;;;iCAGYpB,U,EAAY;AAAA,UAChBqB,YADgB,GACkCrB,UADlC,CAChBqB,YADgB;AAAA,UACFC,cADE,GACkCtB,UADlC,CACFsB,cADE;AAAA,UACcC,SADd,GACkCvB,UADlC,CACcuB,SADd;AAAA,UACyBC,KADzB,GACkCxB,UADlC,CACyBwB,KADzB;AAEvB,WAAKC,WAAL,GAAmB;AAACC,QAAAA,EAAE,EAAEF,KAAL;AAAYG,QAAAA,IAAI,EAAEJ;AAAlB,OAAnB;AACA,WAAKD,cAAL,CAAoBM,OAApB,GAA8BN,cAA9B;AACA,WAAKO,YAAL,GAAoBR,YAApB;AACA,WAAKS,OAAL,GAAe,KAAf;AACD;;;;;;;;;;;;;AAIC,qBAAKC,QAAL,GAAgB9C,eAAe,CAAC,KAAKM,oBAAN,CAA/B;AACA,qBAAKyC,kBAAL,GAA0B9C,UAAU,CAAC,KAAK6C,QAAN,CAAV,CAA0BhC,IAA1B,CAA+B,UAAAkC,OAAO,EAAI;AAClE,kBAAA,MAAI,CAACA,OAAL,GAAeA,OAAf;AACD,iBAFyB,CAA1B;;;;;;;;;;;;;;;;;;;;;;;;;;AAOA,qBAAKC,WAAL,GAAmBjD,eAAe,CAAC,KAAKU,uBAAN,CAAlC;;uBACwBT,UAAU,CAAC,KAAKgD,WAAN,C;;;AAAlC,qBAAKC,U;;;;;;;;;;;;;;;;;;;;;iDAIWC,c;;;;;;;;uBAES,KAAKP,YAAL,CAAkBQ,GAAlB,CAAsBC,WAAtB,E;;;AAAjBC,gBAAAA,Q;AACAC,gBAAAA,O,GAAU,KAAK3C,UAAL,CAAgB4C,W;AAC5BC,gBAAAA,c,GAAiB,K;;AACrB,oBAAGH,QAAQ,CAAC,CAAD,CAAR,KAAgB,KAAKjB,cAAL,CAAoBM,OAAvC,EAAgD;AAC9C,sBAAGQ,cAAc,IAAI,CAACI,OAAnB,IAA8BD,QAAQ,CAAC,CAAD,CAAR,KAAgBI,SAAjD,EAA4D;AAC1D,yBAAK9C,UAAL,CAAgB+C,UAAhB,CAA2B,IAA3B;AACAF,oBAAAA,cAAc,GAAG,IAAjB;AACD;;AACD,uBAAKpB,cAAL,CAAoBM,OAApB,GAA8BW,QAAQ,CAAC,CAAD,CAAtC;AACD;;;uBACuCvD,UAAU,CAAC,KAAK+C,QAAN,EAAgB,KAAKT,cAAL,CAAoBM,OAApC,C;;;AAAlD,qBAAKN,cAAL,CAAoBuB,W;;qBACjBH,c;;;;;;uBACK,KAAKpD,SAAL,CAAewD,YAAf,CAA4BC,eAA5B,E;;;;uBACA,KAAKzD,SAAL,CAAe0D,SAAf,CAAyBhE,UAAzB,E;;;AACN,qBAAKa,UAAL,CAAgB+C,UAAhB,CAA2B,KAA3B;;;AAEF,oBAAI,KAAKtD,SAAL,CAAe2D,qBAAf,IAAwC,KAAK3D,SAAL,CAAe4D,UAAf,KAA8B9D,YAAY,CAAC+D,UAAvF,EAAmG;AACjGhE,kBAAAA,aAAa;AACd;;;;;;;;AAED2B,gBAAAA,OAAO,CAACR,KAAR;;;;;;;;;;;;;;;;;;0CAKkB;AAAA;;AACpB,UAAG,CAAC,KAAKW,iBAAT,EAA4B;AAC1B,YAAG,KAAKQ,WAAL,CAAiBE,IAAjB,KAA0B,EAA1B,IAAgC,KAAKM,OAAL,CAAaN,IAAb,KAAsB,EAAtD,IAA4D,KAAKQ,UAAL,CAAgBR,IAAhB,KAAyB,EAAxF,EAA4F;AAC1FyB,UAAAA,UAAU,CAAC,YAAM;AAAC,YAAA,MAAI,CAAChC,mBAAL;AAA2B,WAAnC,EAAqC,IAArC,CAAV;AACA;AACD;;AACD,YAAG,KAAKK,WAAL,CAAiBE,IAAjB,KAA0B,KAAKM,OAAL,CAAaN,IAAvC,IAA+C,KAAKF,WAAL,CAAiBE,IAAjB,KAA0B,KAAKQ,UAAL,CAAgBR,IAA5F,EAAkG;AAChG,eAAKV,iBAAL,GAAyB,IAAzB;AACA,eAAKpB,UAAL,CAAgBW,SAAhB,uEAAyF,KAAKyB,OAAL,CAAaN,IAAtG,iBAAiH,KAAKQ,UAAL,CAAgBR,IAAjI;AACD;AACF;AACF;;;;;;;;;;;;uBAGO,KAAK7B,c;;;;uBACL,KAAKkC,kB;;;kDACJ,KAAKP,WAAL,CAAiBC,EAAjB,KAAwB,KAAKO,OAAL,CAAaP,E;;;;;;;;;;;;;;;;;;;yFAtH7C5C,U;;;;;WAA0B,E;;kFAC1BA,U;;;;;WAA4B;AAAC8C,MAAAA,OAAO,EAAE,EAAV;AAAciB,MAAAA,WAAW,EAAE;AAA3B,K;;4EAE5B/D,U;;;;;WAAsB,E;;+EACtBA,U;;;;;WAAyB,E;;2EAEzBA,U;;;;;WAAqB,I;;0EACrBA,U;;;;;WAAoB,E;;kFAEpBA,U;;;;;WAA4B,I;;sFAC5BA,U;;;;;WAAgC,I;;qFAChCA,U;;;;;WAA+B,K;;4EAE/BA,U;;;;;WAAqB;AAAC4C,MAAAA,EAAE,EAAE,EAAL;AAASC,MAAAA,IAAI,EAAE;AAAf,K;;+EACrB7C,U;;;;;WAAwB;AAAC4C,MAAAA,EAAE,EAAE,EAAL;AAASC,MAAAA,IAAI,EAAE;AAAf,K;;gFACxB7C,U;;;;;WAAyB;AAAC4C,MAAAA,EAAE,EAAE,EAAL;AAASC,MAAAA,IAAI,EAAE;AAAf,K;;oFAEzB7C,U;;;;;WAA6B,I;;iEAkC7BD,M,qJASAA,M,uJAQAA,M,uJAMAA,M,4JA2BAA,M;AAqBH,eAAeQ,SAAf","sourcesContent":["import { action, observable } from \"mobx\";\nimport getWeb3, { getBalance, getWeb3Instance, getNetwork } from './utils/web3';\nimport { balanceLoaded } from './utils/testUtils'\nimport { BRIDGE_MODES } from './utils/bridgeMode'\n\nclass Web3Store {\n  @observable injectedWeb3 = {};\n  @observable defaultAccount = {address: '', homeBalance: ''};\n\n  @observable homeWeb3 = {};\n  @observable foreignWeb3 = {};\n\n  @observable loading = true;\n  @observable errors = [];\n\n  @observable getWeb3Promise = null;\n  @observable setHomeWeb3Promise = null;\n  @observable metamaskNotSetted = false;\n\n  @observable homeNet = {id: '', name: ''};\n  @observable foreignNet = {id: '', name: ''};\n  @observable metamaskNet = {id: '', name: ''};\n\n  @observable walletInstalled = true\n\n  HOME_HTTP_PARITY_URL = process.env.REACT_APP_HOME_HTTP_PARITY_URL;\n  FOREIGN_HTTP_PARITY_URL = process.env.REACT_APP_FOREIGN_HTTP_PARITY_URL;\n\n  constructor(rootStore) {\n    this.alertStore = rootStore.alertStore;\n    this.rootStore = rootStore\n\n    this.getWeb3Promise = getWeb3()\n\n    this.getWeb3Promise.then((web3Config) => {\n      this.setWeb3State(web3Config)\n      this.getBalances(false)\n      setInterval(() => {\n        this.getBalances(true)\n      }, 3000)\n    }).catch(e => {\n      const error = {\n        rejected: () => this.alertStore.pushError(e.message),\n        unlock: () => this.alertStore.pushError(e.message),\n        install: () => this.walletInstalled = false\n      }[e.type]\n\n      console.error(e.message, 'web3 not loaded')\n      this.errors.push(e.message)\n      this.metamaskNotSetted = true\n      error()\n    })\n    this.setWeb3Home()\n    this.setWeb3Foreign()\n    this.checkMetamaskConfig()\n  }\n\n  @action\n  setWeb3State(web3Config) {\n    const {web3Instance, defaultAccount, netIdName, netId} = web3Config;\n    this.metamaskNet = {id: netId, name: netIdName};\n    this.defaultAccount.address = defaultAccount;\n    this.injectedWeb3 = web3Instance;\n    this.loading = false;\n  }\n\n  @action\n  async setWeb3Home() {\n    this.homeWeb3 = getWeb3Instance(this.HOME_HTTP_PARITY_URL)\n    this.setHomeWeb3Promise = getNetwork(this.homeWeb3).then(homeNet => {\n      this.homeNet = homeNet\n    })\n  }\n\n  @action\n  async setWeb3Foreign() {\n    this.foreignWeb3 = getWeb3Instance(this.FOREIGN_HTTP_PARITY_URL)\n    this.foreignNet = await getNetwork(this.foreignWeb3)\n  }\n\n  @action\n  async getBalances(displayLoading){\n    try {\n      const accounts = await this.injectedWeb3.eth.getAccounts()\n      const Loading = this.alertStore.showLoading\n      let accountUpdated = false\n      if(accounts[0] !== this.defaultAccount.address) {\n        if(displayLoading && !Loading && accounts[0] !== undefined) {\n          this.alertStore.setLoading(true)\n          accountUpdated = true\n        }\n        this.defaultAccount.address = accounts[0]\n      }\n      this.defaultAccount.homeBalance = await getBalance(this.homeWeb3, this.defaultAccount.address)\n      if(accountUpdated) {\n        await this.rootStore.foreignStore.getTokenBalance()\n        await this.rootStore.homeStore.getBalance()\n        this.alertStore.setLoading(false)\n      }\n      if (this.rootStore.bridgeModeInitialized && this.rootStore.bridgeMode !== BRIDGE_MODES.ERC_TO_ERC) {\n        balanceLoaded()\n      }\n    } catch(e){\n      console.error(e)\n    }\n  }\n\n  @action\n  checkMetamaskConfig() {\n    if(!this.metamaskNotSetted) {\n      if(this.metamaskNet.name === '' || this.homeNet.name === '' || this.foreignNet.name === '') {\n        setTimeout(() => {this.checkMetamaskConfig()}, 1000)\n        return\n      }\n      if(this.metamaskNet.name !== this.homeNet.name && this.metamaskNet.name !== this.foreignNet.name) {\n        this.metamaskNotSetted = true\n        this.alertStore.pushError(`You are on an unknown network on your wallet. Please select ${this.homeNet.name} or ${this.foreignNet.name} in order to communicate with the bridge.`)\n      }\n    }\n  }\n\n  async onHomeSide() {\n    await this.getWeb3Promise\n    await this.setHomeWeb3Promise\n    return this.metamaskNet.id === this.homeNet.id\n  }\n}\n\nexport default Web3Store;\n"]},"metadata":{},"sourceType":"module"}