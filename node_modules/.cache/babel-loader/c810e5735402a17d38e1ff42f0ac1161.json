{"ast":null,"code":"import BN from 'bignumber.js';\nexport var fromDecimals = function fromDecimals(number, decimals) {\n  if (decimals == null) {\n    decimals = 18;\n  }\n\n  var returnValue = toBigNumber(number).dividedBy(Math.pow(10, decimals));\n  return isBigNumber(number) ? returnValue : returnValue.toString(10);\n};\nexport var toDecimals = function toDecimals(number, decimals) {\n  if (decimals == null) {\n    decimals = 18;\n  }\n\n  var returnValue = toBigNumber(number).times(Math.pow(10, decimals));\n  return isBigNumber(number) ? returnValue : returnValue.toString(10);\n};\n\nvar isBigNumber = function isBigNumber(object) {\n  return object && (object instanceof BN || object.constructor && object.constructor.name === 'BigNumber');\n};\n\nvar toBigNumber = function toBigNumber(number) {\n  /*jshint maxcomplexity:5 */\n  number = number || 0;\n  if (isBigNumber(number)) return number;\n\n  if (isString(number) && (number.indexOf('0x') === 0 || number.indexOf('-0x') === 0)) {\n    return new BN(number.replace('0x', ''), 16);\n  }\n\n  return new BN(number.toString(10), 10);\n};\n\nvar isString = function isString(object) {\n  return typeof object === 'string' || object && object.constructor && object.constructor.name === 'String';\n};","map":{"version":3,"sources":["/home/usuario/Escritorio/csd-bridge-ui/src/stores/utils/decimals.js"],"names":["BN","fromDecimals","number","decimals","returnValue","toBigNumber","dividedBy","Math","pow","isBigNumber","toString","toDecimals","times","object","constructor","name","isString","indexOf","replace"],"mappings":"AAAA,OAAOA,EAAP,MAAe,cAAf;AACA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,MAAD,EAASC,QAAT,EAAsB;AAChD,MAAIA,QAAQ,IAAI,IAAhB,EAAsB;AACpBA,IAAAA,QAAQ,GAAG,EAAX;AACD;;AACD,MAAMC,WAAW,GAAGC,WAAW,CAACH,MAAD,CAAX,CAAoBI,SAApB,CAA8BC,IAAI,CAACC,GAAL,CAAS,EAAT,EAAaL,QAAb,CAA9B,CAApB;AACA,SAAOM,WAAW,CAACP,MAAD,CAAX,GAAsBE,WAAtB,GAAoCA,WAAW,CAACM,QAAZ,CAAqB,EAArB,CAA3C;AACD,CANM;AAQP,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACT,MAAD,EAASC,QAAT,EAAsB;AAC9C,MAAIA,QAAQ,IAAI,IAAhB,EAAsB;AACpBA,IAAAA,QAAQ,GAAG,EAAX;AACD;;AACD,MAAMC,WAAW,GAAGC,WAAW,CAACH,MAAD,CAAX,CAAoBU,KAApB,CAA0BL,IAAI,CAACC,GAAL,CAAS,EAAT,EAAaL,QAAb,CAA1B,CAApB;AACA,SAAOM,WAAW,CAACP,MAAD,CAAX,GAAsBE,WAAtB,GAAoCA,WAAW,CAACM,QAAZ,CAAqB,EAArB,CAA3C;AACD,CANM;;AAQP,IAAMD,WAAW,GAAG,SAAdA,WAAc,CAACI,MAAD,EAAY;AAC5B,SAAQA,MAAM,KAAKA,MAAM,YAAYb,EAAlB,IAAyBa,MAAM,CAACC,WAAP,IAAsBD,MAAM,CAACC,WAAP,CAAmBC,IAAnB,KAA4B,WAAhF,CAAd;AACH,CAFD;;AAIA,IAAMV,WAAW,GAAG,SAAdA,WAAc,CAACH,MAAD,EAAY;AAC5B;AACAA,EAAAA,MAAM,GAAGA,MAAM,IAAI,CAAnB;AACA,MAAIO,WAAW,CAACP,MAAD,CAAf,EACI,OAAOA,MAAP;;AACJ,MAAIc,QAAQ,CAACd,MAAD,CAAR,KAAqBA,MAAM,CAACe,OAAP,CAAe,IAAf,MAAyB,CAAzB,IAA8Bf,MAAM,CAACe,OAAP,CAAe,KAAf,MAA0B,CAA7E,CAAJ,EAAqF;AACjF,WAAO,IAAIjB,EAAJ,CAAOE,MAAM,CAACgB,OAAP,CAAe,IAAf,EAAoB,EAApB,CAAP,EAAgC,EAAhC,CAAP;AACH;;AACD,SAAO,IAAIlB,EAAJ,CAAOE,MAAM,CAACQ,QAAP,CAAgB,EAAhB,CAAP,EAA4B,EAA5B,CAAP;AACH,CATD;;AAWA,IAAMM,QAAQ,GAAG,SAAXA,QAAW,CAACH,MAAD,EAAY;AACzB,SAAO,OAAOA,MAAP,KAAkB,QAAlB,IACFA,MAAM,IAAIA,MAAM,CAACC,WAAjB,IAAgCD,MAAM,CAACC,WAAP,CAAmBC,IAAnB,KAA4B,QADjE;AAEH,CAHD","sourcesContent":["import BN from 'bignumber.js'\nexport const fromDecimals = (number, decimals) => {\n  if (decimals == null) {\n    decimals = 18;\n  }\n  const returnValue = toBigNumber(number).dividedBy(Math.pow(10, decimals));\n  return isBigNumber(number) ? returnValue : returnValue.toString(10);\n};\n\nexport const toDecimals = (number, decimals) => {\n  if (decimals == null) {\n    decimals = 18;\n  }\n  const returnValue = toBigNumber(number).times(Math.pow(10, decimals));\n  return isBigNumber(number) ? returnValue : returnValue.toString(10);\n};\n\nconst isBigNumber = (object) => {\n    return (object && (object instanceof BN || (object.constructor && object.constructor.name === 'BigNumber')));\n};\n\nconst toBigNumber = (number) => {\n    /*jshint maxcomplexity:5 */\n    number = number || 0;\n    if (isBigNumber(number))\n        return number;\n    if (isString(number) && (number.indexOf('0x') === 0 || number.indexOf('-0x') === 0)) {\n        return new BN(number.replace('0x',''), 16);\n    }\n    return new BN(number.toString(10), 10);\n};\n\nconst isString = (object) => {\n    return typeof object === 'string' ||\n        (object && object.constructor && object.constructor.name === 'String');\n};\n"]},"metadata":{},"sourceType":"module"}