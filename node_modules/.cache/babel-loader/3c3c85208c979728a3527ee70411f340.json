{"ast":null,"code":"import _regeneratorRuntime from \"/home/usuario/Escritorio/csd-bridge-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/usuario/Escritorio/csd-bridge-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/usuario/Escritorio/csd-bridge-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/usuario/Escritorio/csd-bridge-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _applyDecoratedDescriptor from \"/home/usuario/Escritorio/csd-bridge-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\n\nvar _class;\n\nimport { action } from 'mobx';\nimport Web3Store from './Web3Store';\nimport HomeStore from './HomeStore';\nimport ForeignStore from './ForeignStore';\nimport AlertStore from './AlertStore';\nimport GasPriceStore from './GasPriceStore';\nimport TxStore from './TxStore'; //import { abi as HOME_ERC_ABI } from '../contracts/HomeBridgeErcToErc'\n\nimport { abi as HOME_ERC_ABI } from '../contracts/HomeBridgeErcToNative';\nimport { decodeBridgeMode } from './utils/bridgeMode';\nimport { getWeb3Instance } from './utils/web3';\nvar RootStore = (_class =\n/*#__PURE__*/\nfunction () {\n  function RootStore() {\n    _classCallCheck(this, RootStore);\n\n    this.bridgeModeInitialized = false;\n    this.setBridgeMode();\n    this.alertStore = new AlertStore();\n    this.web3Store = new Web3Store(this);\n    this.homeStore = new HomeStore(this);\n    this.foreignStore = new ForeignStore(this);\n    this.gasPriceStore = new GasPriceStore(this);\n    this.txStore = new TxStore(this);\n  }\n\n  _createClass(RootStore, [{\n    key: \"setBridgeMode\",\n    value: function () {\n      var _setBridgeMode = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var homeWeb3, homeBridge, bridgeModeHash;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                homeWeb3 = getWeb3Instance(process.env.REACT_APP_HOME_HTTP_PARITY_URL);\n                homeBridge = new homeWeb3.eth.Contract(HOME_ERC_ABI, process.env.REACT_APP_HOME_BRIDGE_ADDRESS);\n                _context.next = 4;\n                return homeBridge.methods.getBridgeMode().call();\n\n              case 4:\n                bridgeModeHash = _context.sent;\n                this.bridgeMode = decodeBridgeMode(bridgeModeHash);\n                this.bridgeModeInitialized = true;\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function setBridgeMode() {\n        return _setBridgeMode.apply(this, arguments);\n      }\n\n      return setBridgeMode;\n    }()\n  }]);\n\n  return RootStore;\n}(), (_applyDecoratedDescriptor(_class.prototype, \"setBridgeMode\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"setBridgeMode\"), _class.prototype)), _class);\nexport default new RootStore();","map":{"version":3,"sources":["/home/usuario/Escritorio/csd-bridge-ui/src/stores/RootStore.js"],"names":["action","Web3Store","HomeStore","ForeignStore","AlertStore","GasPriceStore","TxStore","abi","HOME_ERC_ABI","decodeBridgeMode","getWeb3Instance","RootStore","bridgeModeInitialized","setBridgeMode","alertStore","web3Store","homeStore","foreignStore","gasPriceStore","txStore","homeWeb3","process","env","REACT_APP_HOME_HTTP_PARITY_URL","homeBridge","eth","Contract","REACT_APP_HOME_BRIDGE_ADDRESS","methods","getBridgeMode","call","bridgeModeHash","bridgeMode"],"mappings":";;;;;;;;AAAA,SAASA,MAAT,QAAuB,MAAvB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,OAAP,MAAoB,WAApB,C,CACA;;AACA,SAAUC,GAAG,IAAIC,YAAjB,QAAqC,oCAArC;AAGA,SAASC,gBAAT,QAAiC,oBAAjC;AACA,SAASC,eAAT,QAAgC,cAAhC;IAEMC,S;;;AACJ,uBAAc;AAAA;;AACZ,SAAKC,qBAAL,GAA6B,KAA7B;AACA,SAAKC,aAAL;AACA,SAAKC,UAAL,GAAkB,IAAIV,UAAJ,EAAlB;AACA,SAAKW,SAAL,GAAiB,IAAId,SAAJ,CAAc,IAAd,CAAjB;AACA,SAAKe,SAAL,GAAiB,IAAId,SAAJ,CAAc,IAAd,CAAjB;AACA,SAAKe,YAAL,GAAoB,IAAId,YAAJ,CAAiB,IAAjB,CAApB;AACA,SAAKe,aAAL,GAAqB,IAAIb,aAAJ,CAAkB,IAAlB,CAArB;AACA,SAAKc,OAAL,GAAe,IAAIb,OAAJ,CAAY,IAAZ,CAAf;AACD;;;;;;;;;;;;;AAIOc,gBAAAA,Q,GAAWV,eAAe,CAACW,OAAO,CAACC,GAAR,CAAYC,8BAAb,C;AAC1BC,gBAAAA,U,GAAa,IAAIJ,QAAQ,CAACK,GAAT,CAAaC,QAAjB,CAA0BlB,YAA1B,EAAwCa,OAAO,CAACC,GAAR,CAAYK,6BAApD,C;;uBACUH,UAAU,CAACI,OAAX,CAAmBC,aAAnB,GAAmCC,IAAnC,E;;;AAAvBC,gBAAAA,c;AACN,qBAAKC,UAAL,GAAkBvB,gBAAgB,CAACsB,cAAD,CAAlC;AACA,qBAAKnB,qBAAL,GAA6B,IAA7B;;;;;;;;;;;;;;;;;;;oEANDZ,M;AAUH,eAAe,IAAIW,SAAJ,EAAf","sourcesContent":["import { action } from 'mobx';\nimport Web3Store from './Web3Store'\nimport HomeStore from './HomeStore'\nimport ForeignStore from './ForeignStore'\nimport AlertStore from './AlertStore'\nimport GasPriceStore from './GasPriceStore'\nimport TxStore from './TxStore'\n//import { abi as HOME_ERC_ABI } from '../contracts/HomeBridgeErcToErc'\nimport  { abi as HOME_ERC_ABI } from '../contracts/HomeBridgeErcToNative'\n\n\nimport { decodeBridgeMode } from './utils/bridgeMode'\nimport { getWeb3Instance } from './utils/web3'\n\nclass RootStore {\n  constructor() {\n    this.bridgeModeInitialized = false\n    this.setBridgeMode()\n    this.alertStore = new AlertStore()\n    this.web3Store = new Web3Store(this)\n    this.homeStore = new HomeStore(this)\n    this.foreignStore = new ForeignStore(this)\n    this.gasPriceStore = new GasPriceStore(this)\n    this.txStore = new TxStore(this)\n  }\n\n  @action\n  async setBridgeMode() {\n    const homeWeb3 = getWeb3Instance(process.env.REACT_APP_HOME_HTTP_PARITY_URL)\n    const homeBridge = new homeWeb3.eth.Contract(HOME_ERC_ABI, process.env.REACT_APP_HOME_BRIDGE_ADDRESS)\n    const bridgeModeHash = await homeBridge.methods.getBridgeMode().call()\n    this.bridgeMode = decodeBridgeMode(bridgeModeHash)\n    this.bridgeModeInitialized = true\n  }\n}\n\nexport default new RootStore();\n"]},"metadata":{},"sourceType":"module"}