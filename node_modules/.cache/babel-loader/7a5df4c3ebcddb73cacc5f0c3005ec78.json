{"ast":null,"code":"import _regeneratorRuntime from \"/home/usuario/Escritorio/csd-bridge-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/usuario/Escritorio/csd-bridge-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _initializerDefineProperty from \"/home/usuario/Escritorio/csd-bridge-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty\";\nimport _classCallCheck from \"/home/usuario/Escritorio/csd-bridge-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/usuario/Escritorio/csd-bridge-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _applyDecoratedDescriptor from \"/home/usuario/Escritorio/csd-bridge-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"/home/usuario/Escritorio/csd-bridge-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerWarningHelper\";\n\nvar _class, _descriptor, _temp;\n\nimport { observable, computed } from \"mobx\";\nimport { toHex } from 'web3-utils';\nimport { fetchGasPrice, fetchGasPriceFromOracle } from './utils/gas';\nvar HOME_GAS_PRICE_FALLBACK = process.env.REACT_APP_HOME_GAS_PRICE_FALLBACK;\nvar HOME_GAS_PRICE_ORACLE_URL = process.env.REACT_APP_HOME_GAS_PRICE_ORACLE_URL;\nvar HOME_GAS_PRICE_SPEED_TYPE = process.env.REACT_APP_HOME_GAS_PRICE_SPEED_TYPE;\nvar HOME_GAS_PRICE_UPDATE_INTERVAL = process.env.REACT_APP_HOME_GAS_PRICE_UPDATE_INTERVAL;\nvar FOREIGN_GAS_PRICE_FALLBACK = process.env.REACT_APP_FOREIGN_GAS_PRICE_FALLBACK;\nvar FOREIGN_GAS_PRICE_ORACLE_URL = process.env.REACT_APP_FOREIGN_GAS_PRICE_ORACLE_URL;\nvar FOREIGN_GAS_PRICE_SPEED_TYPE = process.env.REACT_APP_FOREIGN_GAS_PRICE_SPEED_TYPE;\nvar FOREIGN_GAS_PRICE_UPDATE_INTERVAL = process.env.REACT_APP_FOREIGN_GAS_PRICE_UPDATE_INTERVAL;\nvar GasPriceStore = (_class = (_temp =\n/*#__PURE__*/\nfunction () {\n  function GasPriceStore(rootStore) {\n    _classCallCheck(this, GasPriceStore);\n\n    _initializerDefineProperty(this, \"gasPrice\", _descriptor, this);\n\n    this.oracleUrl = null;\n    this.speedType = null;\n    this.updateInterval = null;\n    this.bridgeContract = null;\n    this.alertStore = rootStore.alertStore;\n    this.homeStore = rootStore.homeStore;\n    this.foreignStore = rootStore.foreignStore;\n    this.web3Store = rootStore.web3Store;\n    this.updateGasPrice();\n  }\n\n  _createClass(GasPriceStore, [{\n    key: \"updateGasPrice\",\n    value: function () {\n      var _updateGasPrice = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var _this = this;\n\n        var newGasPrice;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.web3Store.setHomeWeb3Promise;\n\n              case 2:\n                _context.next = 4;\n                return this.web3Store.onHomeSide();\n\n              case 4:\n                if (!_context.sent) {\n                  _context.next = 12;\n                  break;\n                }\n\n                this.gasPrice = HOME_GAS_PRICE_FALLBACK;\n                this.oracleUrl = HOME_GAS_PRICE_ORACLE_URL;\n                this.speedType = HOME_GAS_PRICE_SPEED_TYPE;\n                this.updateInterval = HOME_GAS_PRICE_UPDATE_INTERVAL || 900000;\n                this.bridgeContract = this.homeStore.homeBridge;\n                _context.next = 17;\n                break;\n\n              case 12:\n                this.gasPrice = FOREIGN_GAS_PRICE_FALLBACK;\n                this.oracleUrl = FOREIGN_GAS_PRICE_ORACLE_URL;\n                this.speedType = FOREIGN_GAS_PRICE_SPEED_TYPE;\n                this.updateInterval = FOREIGN_GAS_PRICE_UPDATE_INTERVAL || 900000;\n                this.bridgeContract = this.foreignStore.foreignBridge;\n\n              case 17:\n                _context.next = 19;\n                return fetchGasPrice({\n                  bridgeContract: this.bridgeContract,\n                  oracleFn: function oracleFn() {\n                    return fetchGasPriceFromOracle(_this.oracleUrl, _this.speedType);\n                  }\n                });\n\n              case 19:\n                newGasPrice = _context.sent;\n                this.gasPrice = newGasPrice || this.gasPrice;\n                setTimeout(function () {\n                  return _this.updateGasPrice();\n                }, this.updateInterval);\n\n              case 22:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function updateGasPrice() {\n        return _updateGasPrice.apply(this, arguments);\n      }\n\n      return updateGasPrice;\n    }()\n  }, {\n    key: \"gasPriceInHex\",\n    get: function get() {\n      return toHex(this.gasPrice);\n    }\n  }]);\n\n  return GasPriceStore;\n}(), _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"gasPrice\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return null;\n  }\n}), _applyDecoratedDescriptor(_class.prototype, \"gasPriceInHex\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"gasPriceInHex\"), _class.prototype)), _class);\nexport default GasPriceStore;","map":{"version":3,"sources":["/home/usuario/Escritorio/csd-bridge-ui/src/stores/GasPriceStore.js"],"names":["observable","computed","toHex","fetchGasPrice","fetchGasPriceFromOracle","HOME_GAS_PRICE_FALLBACK","process","env","REACT_APP_HOME_GAS_PRICE_FALLBACK","HOME_GAS_PRICE_ORACLE_URL","REACT_APP_HOME_GAS_PRICE_ORACLE_URL","HOME_GAS_PRICE_SPEED_TYPE","REACT_APP_HOME_GAS_PRICE_SPEED_TYPE","HOME_GAS_PRICE_UPDATE_INTERVAL","REACT_APP_HOME_GAS_PRICE_UPDATE_INTERVAL","FOREIGN_GAS_PRICE_FALLBACK","REACT_APP_FOREIGN_GAS_PRICE_FALLBACK","FOREIGN_GAS_PRICE_ORACLE_URL","REACT_APP_FOREIGN_GAS_PRICE_ORACLE_URL","FOREIGN_GAS_PRICE_SPEED_TYPE","REACT_APP_FOREIGN_GAS_PRICE_SPEED_TYPE","FOREIGN_GAS_PRICE_UPDATE_INTERVAL","REACT_APP_FOREIGN_GAS_PRICE_UPDATE_INTERVAL","GasPriceStore","rootStore","oracleUrl","speedType","updateInterval","bridgeContract","alertStore","homeStore","foreignStore","web3Store","updateGasPrice","setHomeWeb3Promise","onHomeSide","gasPrice","homeBridge","foreignBridge","oracleFn","newGasPrice","setTimeout"],"mappings":";;;;;;;;;;AAAA,SAASA,UAAT,EAAqBC,QAArB,QAAqC,MAArC;AACA,SAASC,KAAT,QAAsB,YAAtB;AACA,SAASC,aAAT,EAAwBC,uBAAxB,QAAuD,aAAvD;AAEA,IAAMC,uBAAuB,GAAGC,OAAO,CAACC,GAAR,CAAYC,iCAA5C;AACA,IAAMC,yBAAyB,GAAGH,OAAO,CAACC,GAAR,CAAYG,mCAA9C;AACA,IAAMC,yBAAyB,GAAGL,OAAO,CAACC,GAAR,CAAYK,mCAA9C;AACA,IAAMC,8BAA8B,GAAGP,OAAO,CAACC,GAAR,CAAYO,wCAAnD;AACA,IAAMC,0BAA0B,GAAGT,OAAO,CAACC,GAAR,CAAYS,oCAA/C;AACA,IAAMC,4BAA4B,GAAGX,OAAO,CAACC,GAAR,CAAYW,sCAAjD;AACA,IAAMC,4BAA4B,GAAGb,OAAO,CAACC,GAAR,CAAYa,sCAAjD;AACA,IAAMC,iCAAiC,GAAGf,OAAO,CAACC,GAAR,CAAYe,2CAAtD;IAEMC,a;;;AAOJ,yBAAYC,SAAZ,EAAuB;AAAA;;AAAA;;AAAA,SALvBC,SAKuB,GALX,IAKW;AAAA,SAJvBC,SAIuB,GAJX,IAIW;AAAA,SAHvBC,cAGuB,GAHN,IAGM;AAAA,SAFvBC,cAEuB,GAFN,IAEM;AACrB,SAAKC,UAAL,GAAkBL,SAAS,CAACK,UAA5B;AACA,SAAKC,SAAL,GAAiBN,SAAS,CAACM,SAA3B;AACA,SAAKC,YAAL,GAAoBP,SAAS,CAACO,YAA9B;AACA,SAAKC,SAAL,GAAiBR,SAAS,CAACQ,SAA3B;AAEA,SAAKC,cAAL;AACD;;;;;;;;;;;;;;;;uBAGO,KAAKD,SAAL,CAAeE,kB;;;;uBAEX,KAAKF,SAAL,CAAeG,UAAf,E;;;;;;;;AACR,qBAAKC,QAAL,GAAgB/B,uBAAhB;AACA,qBAAKoB,SAAL,GAAiBhB,yBAAjB;AACA,qBAAKiB,SAAL,GAAiBf,yBAAjB;AACA,qBAAKgB,cAAL,GAAsBd,8BAA8B,IAAI,MAAxD;AACA,qBAAKe,cAAL,GAAsB,KAAKE,SAAL,CAAeO,UAArC;;;;;AAEA,qBAAKD,QAAL,GAAgBrB,0BAAhB;AACA,qBAAKU,SAAL,GAAiBR,4BAAjB;AACA,qBAAKS,SAAL,GAAiBP,4BAAjB;AACA,qBAAKQ,cAAL,GAAsBN,iCAAiC,IAAI,MAA3D;AACA,qBAAKO,cAAL,GAAsB,KAAKG,YAAL,CAAkBO,aAAxC;;;;uBAGwBnC,aAAa,CAAC;AACtCyB,kBAAAA,cAAc,EAAE,KAAKA,cADiB;AAEtCW,kBAAAA,QAAQ,EAAE;AAAA,2BAAMnC,uBAAuB,CAAC,KAAI,CAACqB,SAAN,EAAiB,KAAI,CAACC,SAAtB,CAA7B;AAAA;AAF4B,iBAAD,C;;;AAAjCc,gBAAAA,W;AAKN,qBAAKJ,QAAL,GAAgBI,WAAW,IAAI,KAAKJ,QAApC;AACAK,gBAAAA,UAAU,CAAC;AAAA,yBAAM,KAAI,CAACR,cAAL,EAAN;AAAA,iBAAD,EAA8B,KAAKN,cAAnC,CAAV;;;;;;;;;;;;;;;;;;wBAG4B;AAC5B,aAAOzB,KAAK,CAAC,KAAKkC,QAAN,CAAZ;AACD;;;;qFA3CApC,U;;;;;WAAsB,I;;kEAyCtBC,Q;AAKH,eAAesB,aAAf","sourcesContent":["import { observable, computed } from \"mobx\";\nimport { toHex } from 'web3-utils';\nimport { fetchGasPrice, fetchGasPriceFromOracle } from './utils/gas'\n\nconst HOME_GAS_PRICE_FALLBACK = process.env.REACT_APP_HOME_GAS_PRICE_FALLBACK\nconst HOME_GAS_PRICE_ORACLE_URL = process.env.REACT_APP_HOME_GAS_PRICE_ORACLE_URL\nconst HOME_GAS_PRICE_SPEED_TYPE = process.env.REACT_APP_HOME_GAS_PRICE_SPEED_TYPE\nconst HOME_GAS_PRICE_UPDATE_INTERVAL = process.env.REACT_APP_HOME_GAS_PRICE_UPDATE_INTERVAL\nconst FOREIGN_GAS_PRICE_FALLBACK = process.env.REACT_APP_FOREIGN_GAS_PRICE_FALLBACK\nconst FOREIGN_GAS_PRICE_ORACLE_URL = process.env.REACT_APP_FOREIGN_GAS_PRICE_ORACLE_URL\nconst FOREIGN_GAS_PRICE_SPEED_TYPE = process.env.REACT_APP_FOREIGN_GAS_PRICE_SPEED_TYPE\nconst FOREIGN_GAS_PRICE_UPDATE_INTERVAL = process.env.REACT_APP_FOREIGN_GAS_PRICE_UPDATE_INTERVAL\n\nclass GasPriceStore {\n  @observable gasPrice = null\n  oracleUrl = null\n  speedType = null\n  updateInterval = null\n  bridgeContract = null\n\n  constructor(rootStore) {\n    this.alertStore = rootStore.alertStore\n    this.homeStore = rootStore.homeStore\n    this.foreignStore = rootStore.foreignStore\n    this.web3Store = rootStore.web3Store\n\n    this.updateGasPrice()\n  }\n\n  async updateGasPrice() {\n    await this.web3Store.setHomeWeb3Promise\n\n    if (await this.web3Store.onHomeSide()) {\n      this.gasPrice = HOME_GAS_PRICE_FALLBACK\n      this.oracleUrl = HOME_GAS_PRICE_ORACLE_URL\n      this.speedType = HOME_GAS_PRICE_SPEED_TYPE\n      this.updateInterval = HOME_GAS_PRICE_UPDATE_INTERVAL || 900000\n      this.bridgeContract = this.homeStore.homeBridge\n    } else {\n      this.gasPrice = FOREIGN_GAS_PRICE_FALLBACK\n      this.oracleUrl = FOREIGN_GAS_PRICE_ORACLE_URL\n      this.speedType = FOREIGN_GAS_PRICE_SPEED_TYPE\n      this.updateInterval = FOREIGN_GAS_PRICE_UPDATE_INTERVAL || 900000\n      this.bridgeContract = this.foreignStore.foreignBridge\n    }\n\n    const newGasPrice = await fetchGasPrice({\n      bridgeContract: this.bridgeContract,\n      oracleFn: () => fetchGasPriceFromOracle(this.oracleUrl, this.speedType)\n    })\n\n    this.gasPrice = newGasPrice || this.gasPrice\n    setTimeout(() => this.updateGasPrice(), this.updateInterval)\n  }\n\n  @computed get gasPriceInHex() {\n    return toHex(this.gasPrice)\n  }\n}\n\nexport default GasPriceStore;\n"]},"metadata":{},"sourceType":"module"}