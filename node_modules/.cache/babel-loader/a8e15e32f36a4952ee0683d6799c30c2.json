{"ast":null,"code":"import _regeneratorRuntime from \"/home/usuario/Escritorio/csd-bridge-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/usuario/Escritorio/csd-bridge-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport Web3 from 'web3';\nimport { fromWei, toHex } from 'web3-utils';\n\nvar updateTitle = function updateTitle() {\n  var networkName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'No chain specified';\n  var defaultTitle = 'TokenBridge UI app';\n\n  if (!process.env.REACT_APP_TITLE) {\n    document.title = defaultTitle;\n  } else {\n    var titleReplaceString = '%c';\n    var appTitle = process.env.REACT_APP_TITLE || defaultTitle;\n\n    if (appTitle.indexOf(titleReplaceString) !== -1) {\n      document.title = appTitle.replace(titleReplaceString, networkName);\n    } else {\n      document.title = appTitle;\n    }\n  }\n};\n\nvar getWeb3 = function getWeb3() {\n  return new Promise(function (resolve, reject) {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener('load',\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var web3, _window, ethereum, errorMsg, _errorMsg;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              web3 = window.web3;\n              _window = window, ethereum = _window.ethereum;\n              updateTitle();\n\n              if (!ethereum) {\n                _context.next = 19;\n                break;\n              }\n\n              web3 = new Web3(ethereum);\n              _context.prev = 5;\n              _context.next = 8;\n              return ethereum.enable();\n\n            case 8:\n              _context.next = 10;\n              return processWeb3(web3, resolve, reject);\n\n            case 10:\n              _context.next = 17;\n              break;\n\n            case 12:\n              _context.prev = 12;\n              _context.t0 = _context[\"catch\"](5);\n              console.log(_context.t0);\n              errorMsg = \"Wallet account rejected by user. You need to unlock your wallet.\\n           Please refresh the page and click 'Connect' button in your wallet popup.\";\n              reject({\n                type: 'rejected',\n                message: errorMsg\n              });\n\n            case 17:\n              _context.next = 29;\n              break;\n\n            case 19:\n              if (!(typeof web3 !== 'undefined')) {\n                _context.next = 25;\n                break;\n              }\n\n              web3 = new Web3(web3.currentProvider);\n              _context.next = 23;\n              return processWeb3(web3, resolve, reject);\n\n            case 23:\n              _context.next = 29;\n              break;\n\n            case 25:\n              // Fallback to localhost if no web3 injection.\n              _errorMsg = '';\n              reject({\n                type: 'install',\n                message: _errorMsg\n              });\n              console.log('No web3 instance injected, using Local web3.');\n              console.error('wallet not found');\n\n            case 29:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[5, 12]]);\n    })));\n  });\n};\n\nexport default getWeb3;\nvar networks = {\n  1: 'Ethereum Mainnet',\n  3: 'Ropsten',\n  4: 'Rinkeby',\n  30: 'RSK Mainnet',\n  31: 'RSK Testnet',\n  42: 'Kovan',\n  61: 'Ethereum Classic',\n  77: 'Sokol',\n  99: 'POA Network',\n  100: 'Dai Chain',\n  172: 'Resil'\n};\nexport var getNetworkName = function getNetworkName(id) {\n  return networks[id] || 'Unknown';\n};\nexport var getBalance =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(web3, address) {\n    var balance;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return web3.eth.getBalance(address);\n\n          case 2:\n            balance = _context2.sent;\n            return _context2.abrupt(\"return\", fromWei(balance));\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function getBalance(_x, _x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var getWeb3Instance = function getWeb3Instance(provider) {\n  var web3Provider = new Web3.providers.HttpProvider(provider);\n  return new Web3(web3Provider);\n};\nexport var getNetwork =\n/*#__PURE__*/\nfunction () {\n  var _ref3 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee3(web3) {\n    var id, name;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return web3.eth.getChainId();\n\n          case 2:\n            id = _context3.sent;\n            name = getNetworkName(id);\n            return _context3.abrupt(\"return\", {\n              id: id,\n              name: name\n            });\n\n          case 5:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function getNetwork(_x3) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexport var getBlockNumber = function getBlockNumber(web3) {\n  return web3.eth.getBlockNumber();\n};\nexport var estimateGas =\n/*#__PURE__*/\nfunction () {\n  var _ref4 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee4(web3, to, gasPrice, from, value, data) {\n    var gas;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return web3.eth.estimateGas({\n              to: to,\n              gasPrice: gasPrice,\n              from: from,\n              value: value,\n              data: data\n            });\n\n          case 2:\n            gas = _context4.sent;\n            return _context4.abrupt(\"return\", toHex(gas.toString()));\n\n          case 4:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n\n  return function estimateGas(_x4, _x5, _x6, _x7, _x8, _x9) {\n    return _ref4.apply(this, arguments);\n  };\n}();\n\nvar processWeb3 =\n/*#__PURE__*/\nfunction () {\n  var _ref5 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee5(web3, resolve, reject) {\n    var netId, netIdName, accounts, defaultAccount, results;\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.prev = 0;\n            _context5.next = 3;\n            return web3.eth.getChainId();\n\n          case 3:\n            netId = _context5.sent;\n            _context5.next = 9;\n            break;\n\n          case 6:\n            _context5.prev = 6;\n            _context5.t0 = _context5[\"catch\"](0);\n            reject({\n              type: 'unlock',\n              message: 'Wallet does not support getting the Chain ID. Please use another wallet or specify a RPC url of a node that supports eth_chainId call'\n            });\n\n          case 9:\n            netIdName = getNetworkName(netId);\n            console.log(\"This is \".concat(netIdName, \" network.\"), netId);\n            _context5.next = 13;\n            return web3.eth.getAccounts();\n\n          case 13:\n            accounts = _context5.sent;\n            defaultAccount = accounts[0] || null;\n\n            if (defaultAccount === null) {\n              reject({\n                type: 'unlock',\n                message: 'Please unlock your wallet and refresh the page'\n              });\n            }\n\n            updateTitle(netIdName);\n            results = {\n              web3Instance: new Web3(web3.currentProvider),\n              netIdName: netIdName,\n              netId: netId,\n              injectedWeb3: true,\n              defaultAccount: defaultAccount\n            };\n            resolve(results);\n\n          case 19:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5, null, [[0, 6]]);\n  }));\n\n  return function processWeb3(_x10, _x11, _x12) {\n    return _ref5.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/home/usuario/Escritorio/csd-bridge-ui/src/stores/utils/web3.js"],"names":["Web3","fromWei","toHex","updateTitle","networkName","defaultTitle","process","env","REACT_APP_TITLE","document","title","titleReplaceString","appTitle","indexOf","replace","getWeb3","Promise","resolve","reject","window","addEventListener","web3","ethereum","enable","processWeb3","console","log","errorMsg","type","message","currentProvider","error","networks","getNetworkName","id","getBalance","address","eth","balance","getWeb3Instance","provider","web3Provider","providers","HttpProvider","getNetwork","getChainId","name","getBlockNumber","estimateGas","to","gasPrice","from","value","data","gas","toString","netId","netIdName","getAccounts","accounts","defaultAccount","results","web3Instance","injectedWeb3"],"mappings":"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","sourcesContent":["import Web3 from 'web3'\nimport { fromWei, toHex } from 'web3-utils'\n\nconst updateTitle = (networkName = 'No chain specified') => {\n  const defaultTitle = 'TokenBridge UI app'\n  if (!process.env.REACT_APP_TITLE) {\n    document.title = defaultTitle\n  }\n  else {\n    const titleReplaceString = '%c'\n    let appTitle = process.env.REACT_APP_TITLE || defaultTitle\n\n    if (appTitle.indexOf(titleReplaceString) !== -1) {\n      document.title = appTitle.replace(titleReplaceString, networkName)\n    }\n    else {\n      document.title = appTitle\n    }\n  }\n}\n\nconst getWeb3 = () => {\n  return new Promise(function (resolve, reject) {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener('load',async function () {\n      let web3 = window.web3\n      const { ethereum } = window\n\n      updateTitle()\n\n      if (ethereum) {\n        web3 = new Web3(ethereum)\n        try {\n          // Request account access\n          await ethereum.enable()\n          await processWeb3(web3, resolve,  reject)\n        } catch (error) {\n          console.log(error)\n          const errorMsg = `Wallet account rejected by user. You need to unlock your wallet.\n           Please refresh the page and click 'Connect' button in your wallet popup.`\n          reject({ type: 'rejected', message: errorMsg })\n        }\n      } else if (typeof web3 !== 'undefined') {\n        web3 = new Web3(web3.currentProvider)\n        await processWeb3(web3, resolve,  reject)\n      } else {\n        // Fallback to localhost if no web3 injection.\n        const errorMsg = ''\n        reject({ type: 'install', message: errorMsg })\n        console.log('No web3 instance injected, using Local web3.');\n        console.error('wallet not found');\n      }\n    })\n  })\n}\n\nexport default getWeb3\n\nconst networks = {\n  1: 'Ethereum Mainnet',\n  3: 'Ropsten',\n  4: 'Rinkeby',\n  30: 'RSK Mainnet',\n  31: 'RSK Testnet',\n  42:'Kovan',\n  61: 'Ethereum Classic',\n  77:'Sokol',\n  99: 'POA Network',\n  100: 'Dai Chain',\n  172: 'Resil'\n\n}\n\nexport const getNetworkName = (id) => networks[id] || 'Unknown'\n\nexport const getBalance = async (web3, address) => {\n  const balance = await web3.eth.getBalance(address)\n  return fromWei(balance)\n}\n\nexport const getWeb3Instance = (provider) => {\n  const web3Provider = new Web3.providers.HttpProvider(provider);\n  return new Web3(web3Provider);\n}\n\nexport const getNetwork = async (web3) => {\n  const id = await web3.eth.getChainId()\n  const name = getNetworkName(id)\n  return {\n    id,\n    name\n  }\n}\n\nexport const getBlockNumber = (web3) => web3.eth.getBlockNumber()\n\nexport const estimateGas = async (web3, to, gasPrice, from, value, data) =>{\n  const gas = await web3.eth.estimateGas({to, gasPrice, from, value, data})\n  return toHex(gas.toString())\n}\n\nconst processWeb3 = async (web3, resolve,  reject) => {\n  let netId\n  try {\n    netId = await web3.eth.getChainId()\n  } catch (error) {\n    reject({ type: 'unlock', message: 'Wallet does not support getting the Chain ID. Please use another wallet or specify a RPC url of a node that supports eth_chainId call' })\n  }\n  const netIdName = getNetworkName(netId)\n\n  console.log(`This is ${netIdName} network.`, netId)\n\n  const accounts = await web3.eth.getAccounts()\n  const defaultAccount = accounts[0] || null;\n\n  if(defaultAccount === null){\n    reject({ type: 'unlock', message: 'Please unlock your wallet and refresh the page' })\n  }\n\n  updateTitle(netIdName)\n\n  const results = {\n    web3Instance: new Web3(web3.currentProvider),\n    netIdName,\n    netId,\n    injectedWeb3: true,\n    defaultAccount\n  }\n  resolve(results)\n}\n"]},"metadata":{},"sourceType":"module"}